{
  "openapi": "3.1.0",
  "info": {
    "title": "iNavi Maps API",
    "description": "Comprehensive location and routing services",
    "version": "v1.0.0"
  },
  "servers": [
    {
      "url": "https://dev-imaps.inavi.com",
      "description": "iMPS dev Maps API"
    }
  ],
  "tags": [
    {
      "name": "Route",
      "description": "Route API"
    },
    {
      "name": "Search",
      "description": "Search API"
    }
  ],
  "paths": {
    "/maps/v3.0/appkeys/{appkey}/route-time": {
      "post": {
        "tags": [
          "Route"
        ],
        "summary": "General Route Prediction Search",
        "description": "Predicts a route and returns detailed guidance based on a specified estimated departure or arrival time, using the coordinates of an origin, destination, and optional waypoints.",
        "operationId": "routeTime",
        "parameters": [
          {
            "name": "appkey",
            "in": "path",
            "description": "API key with permission to use this API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Search conditions for the General Route Prediction Search.",
                "properties": {
                  "option": {
                    "type": "string",
                    "default": "stats",
                    "description": "Specifies the option to use for the route search. 'stats' prioritizes statistical prediction data, 'stats_freeroad' prioritizes free roads, and 'stats_highway' prioritizes highways. The default value is 'stats'.",
                    "examples": [
                      "stats",
                      "stats_freeroad",
                      "stats_highway"
                    ],
                    "pattern": "^(stats|stats_freeroad|stats_highway)$"
                  },
                  "startX": {
                    "type": "string",
                    "description": "The X-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "126.9784147",
                    "minLength": 1
                  },
                  "startY": {
                    "type": "string",
                    "description": "The Y-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "37.5666805",
                    "minLength": 1
                  },
                  "endX": {
                    "type": "string",
                    "description": "The X-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "127.105399",
                    "minLength": 1
                  },
                  "endY": {
                    "type": "string",
                    "description": "The Y-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "37.5124518",
                    "minLength": 1
                  },
                  "type": {
                    "type": "string",
                    "default": "start",
                    "description": "Represents the reference time. It determines whether the set time is considered the departure time or the arrival time. 'start' means the search is based on the departure time, and 'end' means it's based on the arrival time. The default value is 'start'.",
                    "examples": [
                      "start",
                      "end"
                    ],
                    "pattern": "^(start|end)$"
                  },
                  "year": {
                    "type": "integer",
                    "format": "YYYY",
                    "description": "The reference year for the route search (YYYY). (e.g., 2025)",
                    "example": 2025,
                    "minimum": 1
                  },
                  "month": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The reference month for the route search. (1-12)",
                    "example": 8,
                    "maximum": 12,
                    "minimum": 1
                  },
                  "day": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The reference day for the route search. (1-31)",
                    "example": 15,
                    "maximum": 31,
                    "minimum": 1
                  },
                  "hour": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The reference hour for the route search, in 24-hour format (0-23).",
                    "example": 17,
                    "maximum": 23,
                    "minimum": 0
                  },
                  "minutes": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The reference minute for the route search. (0-59)",
                    "example": 30,
                    "maximum": 59,
                    "minimum": 0
                  },
                  "via1X": {
                    "type": "string",
                    "description": "The X-coordinate for the first waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "127.027621"
                  },
                  "via1Y": {
                    "type": "string",
                    "description": "The Y-coordinate for the first waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "37.497942"
                  },
                  "via2X": {
                    "type": "string",
                    "description": "The X-coordinate for the second waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via2Y": {
                    "type": "string",
                    "description": "The Y-coordinate for the second waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via3X": {
                    "type": "string",
                    "description": "The X-coordinate for the third waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via3Y": {
                    "type": "string",
                    "description": "The Y-coordinate for the third waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via4X": {
                    "type": "string",
                    "description": "The X-coordinate for the fourth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via4Y": {
                    "type": "string",
                    "description": "The Y-coordinate for the fourth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via5X": {
                    "type": "string",
                    "description": "The X-coordinate for the fifth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "via5Y": {
                    "type": "string",
                    "description": "The Y-coordinate for the fifth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
                  },
                  "coordType": {
                    "type": "string",
                    "default": "wgs84",
                    "description": "Specifies the coordinate system for all input coordinates (origin, destination, waypoints). 'wgs84' is the international standard coordinate system, and 'tw' is an internal Tinkware coordinate system. The default value is 'wgs84'.",
                    "examples": [
                      "wgs84",
                      "WGS84",
                      "tw",
                      "TW"
                    ],
                    "pattern": "^(tw|wgs84|TW|WGS84)$"
                  },
                  "carType": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "description": "Specifies the vehicle type for the route search. (1: Small car, 2: Medium car, 3: Large car, 4: Large truck, 5: Special truck, 6: Compact car). The default value is 1.",
                    "examples": [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                      "6"
                    ]
                  },
                  "useTrafficColor": {
                    "type": "boolean",
                    "default": true,
                    "description": "Determines whether to include real-time traffic status (e.g., clear, slow, congested) as color information in the route result. The default value is true.",
                    "example": true
                  },
                  "guideTop": {
                    "type": "integer",
                    "format": "int32",
                    "default": 5,
                    "description": "The maximum number of major guidance points (Guide Points) to include in the route result. The default value is 5.",
                    "example": 5
                  },
                  "useGuide": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to include detailed turn-by-turn navigation information in the route result. The default value is false.",
                    "example": false
                  },
                  "groupByTrafficColor": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to group the detailed path list (paths) by traffic color. The default value is false.",
                    "example": false
                  },
                  "beforeCount": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "The number of additional routes to search at time intervals set by the 'interval' parameter *before* the reference time. (e.g., if beforeCount=2 and interval=15, it searches for routes 15 and 30 minutes before the reference time). The default is 0.",
                    "example": 2
                  },
                  "afterCount": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "The number of additional routes to search at time intervals set by the 'interval' parameter *after* the reference time. (e.g., if afterCount=2 and interval=15, it searches for routes 15 and 30 minutes after the reference time). The default is 0.",
                    "example": 2
                  },
                  "useTaxifare": {
                    "type": "string",
                    "default": "0",
                    "description": "Determines whether to retrieve the estimated taxi fare for the route. (0: Do not retrieve, 1: Standard taxi, 2: Deluxe taxi, 3: Both standard and deluxe). The default is 0.",
                    "examples": [
                      "0",
                      "1",
                      "2",
                      "3"
                    ]
                  },
                  "interval": {
                    "type": "integer",
                    "format": "int32",
                    "default": 15,
                    "description": "Sets the time interval in minutes to be applied when using 'beforeCount' or 'afterCount'. The default is 15 minutes.",
                    "example": 15
                  },
                  "useStartDirection": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to prioritize the vehicle's direction of travel at the start of the route search. The default is false. This can be useful when the precise 'angle' of the vehicle is unknown.",
                    "example": false
                  },
                  "searchByAddress": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether to perform an address-based route search. The default value is false.",
                    "example": false
                  },
                  "useAngle": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to use the departure angle in the search. If set to true, the 'angle' value is required. The default is false. (true: Prioritize driving direction, false: Do not prioritize driving direction).",
                    "example": false
                  },
                  "angle": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The departure angle of the vehicle, applied when 'useAngle' is true. It takes a value between 0 and 359 degrees, with 0 representing true north, increasing clockwise.",
                    "example": 90
                  },
                  "usageType": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "A type that distinguishes the usage purpose of the API service. (0: General, 1: Taxi). The default is 0.",
                    "examples": [
                      "0",
                      "1"
                    ]
                  },
                  "carWeight": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "The total weight of the vehicle in kilograms (kg). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
                    "example": 4500
                  },
                  "carHeight": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "The height of the vehicle in centimeters (cm). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
                    "example": 250
                  },
                  "avoidWaterSourceArea": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to avoid water source protection areas during the route search. The default is false.",
                    "example": false
                  },
                  "avoidNarrowRoad": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "Sets the avoidance level for narrow roads (side streets). The value represents the number of round-trip lanes. Roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
                    "example": 0
                  },
                  "avoidUTurn": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "Sets the avoidance level for U-turns. The value represents the number of round-trip lanes. U-turns on roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, U-turns on roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
                    "example": 6
                  },
                  "dem": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to include elevation (Digital Elevation Model) information for each point in the route result. The default is false.",
                    "example": false
                  }
                },
                "required": [
                  "day",
                  "endX",
                  "endY",
                  "hour",
                  "minutes",
                  "month",
                  "startX",
                  "startY",
                  "type",
                  "year"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The top-level object representing the entire response of the Route Prediction Time Search API.",
                  "properties": {
                    "route": {
                      "type": "object",
                      "description": "An object containing the detailed data of the route prediction search result.",
                      "properties": {
                        "data": {
                          "type": "object",
                          "description": "The core data object containing summary information and a list of detailed path segments for the route search result.",
                          "properties": {
                            "distance": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The total distance of the entire route in meters (m).",
                              "example": 72183
                            },
                            "taxiFare": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
                              "example": 45000
                            },
                            "totalTaxiFare": {
                              "type": "string",
                              "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
                              "examples": [
                                "4800,7000",
                                "7000"
                              ]
                            },
                            "times": {
                              "type": "array",
                              "description": "A list (array) of route summaries for each time slot searched by the 'beforeCount' and 'afterCount' request parameters. If both are 0, an empty array is returned.",
                              "items": {
                                "type": "object",
                                "description": "An object containing the route summary for each time slot, based on the 'interval' parameter. This object is returned when 'beforeCount' or 'afterCount' is set.",
                                "properties": {
                                  "index": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The sequence number (index) of the searched time slot. '0' indicates the reference time set in the request. As the index value increases, the reference time based on the interval also increases.",
                                    "examples": [
                                      "-2",
                                      "-1",
                                      "0",
                                      "1",
                                      "2"
                                    ]
                                  },
                                  "distance": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The total distance in meters (m) for a departure in this time slot.",
                                    "example": 72183
                                  },
                                  "spend_time": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The total estimated travel time in seconds for a departure in this time slot.",
                                    "example": 3780
                                  },
                                  "start_time": {
                                    "type": "object",
                                    "description": "An object representing a date and time.",
                                    "properties": {
                                      "year": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The year information (YYYY).",
                                        "example": 2019
                                      },
                                      "month": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The month information (1-12).",
                                        "example": 11
                                      },
                                      "day": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The day information (1-31).",
                                        "example": 26
                                      },
                                      "hour": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The hour information (0-23).",
                                        "example": 11
                                      },
                                      "minutes": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The minute information (0-59).",
                                        "example": 0
                                      }
                                    }
                                  },
                                  "end_time": {
                                    "type": "object",
                                    "description": "An object representing a date and time.",
                                    "properties": {
                                      "year": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The year information (YYYY).",
                                        "example": 2019
                                      },
                                      "month": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The month information (1-12).",
                                        "example": 11
                                      },
                                      "day": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The day information (1-31).",
                                        "example": 26
                                      },
                                      "hour": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The hour information (0-23).",
                                        "example": 11
                                      },
                                      "minutes": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The minute information (0-59).",
                                        "example": 0
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "paths": {
                              "type": "array",
                              "description": "A list (array) of information for each detailed segment that constitutes the route.",
                              "items": {
                                "type": "object",
                                "description": "An object containing information for a single detailed segment (link) of the route.",
                                "properties": {
                                  "coords": {
                                    "type": "array",
                                    "description": "A list (array) of coordinate points that make up this segment.",
                                    "items": {
                                      "type": "object",
                                      "description": "An object containing information for a single coordinate point.",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "format": "double",
                                          "description": "The X coordinate of this point.",
                                          "example": 127.105399
                                        },
                                        "y": {
                                          "type": "number",
                                          "format": "double",
                                          "description": "The Y coordinate of this point.",
                                          "example": 37.5124518
                                        },
                                        "dem": {
                                          "type": "number",
                                          "format": "double",
                                          "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                                          "example": 35.5
                                        }
                                      }
                                    }
                                  },
                                  "speed": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The average speed for this segment.",
                                    "example": 85
                                  },
                                  "distance": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The distance of this segment in meters (m).",
                                    "example": 2800
                                  },
                                  "spend_time": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The estimated travel time in seconds to pass through this segment.",
                                    "example": 120
                                  },
                                  "road_code": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                                    "enum": [
                                      "0",
                                      "1",
                                      "2",
                                      "3",
                                      "4",
                                      "5"
                                    ],
                                    "example": 1
                                  },
                                  "traffic_color": {
                                    "type": "string",
                                    "description": "The color code representing the traffic condition of this segment.",
                                    "example": "#fb3a76"
                                  },
                                  "point_type": {
                                    "type": "string",
                                    "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                                    "examples": [
                                      "S",
                                      "V",
                                      "E",
                                      "N"
                                    ]
                                  }
                                }
                              }
                            },
                            "spend_time": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The total estimated travel time for the entire route in seconds.",
                              "example": 3720
                            },
                            "toll_fee": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The total toll fees incurred on the route.",
                              "example": 3400
                            }
                          }
                        }
                      }
                    },
                    "header": {
                      "type": "object",
                      "description": "Shows the status of the API response result.",
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean",
                          "description": "Indicates whether the API request was successful.",
                          "example": true
                        },
                        "resultCode": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                          "example": 0
                        },
                        "resultMessage": {
                          "type": "string",
                          "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/maps/v3.0/appkeys/{appkey}/route-normal-via": {
      "post": {
        "tags": [
          "Route"
        ],
        "summary": "Multi-Waypoint Route Search",
        "description": "Returns optimized route information based on a search using an origin, a destination, and up to 100 waypoints. Performs route searches using various strategies based on request parameters, such as reflecting real-time traffic, prioritizing the shortest distance, or optimizing for motorcycles.",
        "operationId": "routeNormalVia",
        "parameters": [
          {
            "name": "appkey",
            "in": "path",
            "description": "API key with permission to use this API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Search conditions for the multi-waypoint route search.",
                "properties": {
                  "startX": {
                    "type": "string",
                    "description": "The X-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "126.9784147",
                    "minLength": 1
                  },
                  "startY": {
                    "type": "string",
                    "description": "The Y-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "37.5666805",
                    "minLength": 1
                  },
                  "endX": {
                    "type": "string",
                    "description": "The X-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "127.105399",
                    "minLength": 1
                  },
                  "endY": {
                    "type": "string",
                    "description": "The Y-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
                    "example": "37.5124518",
                    "minLength": 1
                  },
                  "option": {
                    "type": "string",
                    "description": "Route search option. (Only one can be selected: real_traffic: Real-time Recommendation 1, real_traffic2: Real-time Recommendation 2, real_traffic_freeroad: Real-time Rec. + Free roads, short_distance_priority: Shortest distance, motorcycle: Motorcycle, recommendation: Recommended, highway_priority: Highway priority, personal_mobility: Optimized for Personal Mobility).",
                    "examples": [
                      "real_traffic",
                      "real_traffic2",
                      "real_traffic_freeroad",
                      "short_distance_priority",
                      "motorcycle",
                      "recommendation",
                      "highway_priority",
                      "personal_mobility"
                    ],
                    "minLength": 1
                  },
                  "coordType": {
                    "type": "string",
                    "default": "wgs84",
                    "description": "Specifies the coordinate system for all input coordinates (origin, destination, waypoints). 'wgs84' is the international standard coordinate system, and 'tw' is an internal Tinkware coordinate system. The default value is 'wgs84'.",
                    "examples": [
                      "wgs84",
                      "WGS84",
                      "tw",
                      "TW"
                    ],
                    "minLength": 1,
                    "pattern": "^(tw|wgs84|TW|WGS84)$"
                  },
                  "viaList": {
                    "type": "array",
                    "description": "A list (array) of waypoint information. Up to 100 waypoints can be set.",
                    "items": {
                      "type": "object",
                      "description": "An object containing the coordinate information for a single waypoint.",
                      "properties": {
                        "viaX": {
                          "type": "string",
                          "description": "The X-coordinate of the waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
                          "minLength": 1
                        },
                        "viaY": {
                          "type": "string",
                          "description": "The Y-coordinate of the waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "viaX",
                        "viaY"
                      ]
                    },
                    "maxItems": 100,
                    "maximum": 100,
                    "minItems": 0
                  },
                  "useAngle": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to use the departure angle in the search. If set to true, the 'angle' value is required. The default is false. (true: Prioritize driving direction, false: Do not prioritize driving direction).",
                    "example": false
                  },
                  "angle": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The departure angle of the vehicle, applied when 'useAngle' is true. It takes a value between 0 and 359 degrees, with 0 representing true north, increasing clockwise.",
                    "example": 90
                  },
                  "carType": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "description": "Specifies the vehicle type for the route search. (1: Small car, 2: Medium car, 3: Large car, 4: Large truck, 5: Special truck, 6: Compact car). The default value is 1.",
                    "examples": [
                      "1",
                      "2",
                      "3",
                      "4",
                      "5",
                      "6"
                    ]
                  },
                  "guideTop": {
                    "type": "integer",
                    "format": "int32",
                    "default": 5,
                    "description": "The maximum number of major guidance points (Guide Points) to include in the route result. The default value is 5.",
                    "example": 5
                  },
                  "useGuide": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to include detailed turn-by-turn navigation information in the route result. The default value is false.",
                    "example": false
                  },
                  "groupByTrafficColor": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to group the detailed path list (paths) by traffic color. The default value is false.",
                    "example": false
                  },
                  "useTaxifare": {
                    "type": "string",
                    "default": "0",
                    "description": "Determines whether to retrieve the estimated taxi fare for the route. (0: Do not retrieve, 1: Standard taxi, 2: Deluxe taxi, 3: Both standard and deluxe). The default is 0.",
                    "examples": [
                      "0",
                      "1",
                      "2",
                      "3"
                    ]
                  },
                  "useStartDirection": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to prioritize the vehicle's direction of travel at the start of the route search. The default is false. This can be useful when the precise 'angle' of the vehicle is unknown.",
                    "example": false
                  },
                  "searchByAddress": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether to perform an address-based route search. The default value is false.",
                    "example": false
                  },
                  "usageType": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "A type that distinguishes the usage purpose of the API service. (0: General, 1: Taxi). The default is 0.",
                    "examples": [
                      "0",
                      "1"
                    ]
                  },
                  "carWeight": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "The total weight of the vehicle in kilograms (kg). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
                    "example": 4500
                  },
                  "carHeight": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "The height of the vehicle in centimeters (cm). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
                    "example": 250
                  },
                  "avoidWaterSourceArea": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to avoid water source protection areas during the route search. The default is false.",
                    "example": false
                  },
                  "avoidNarrowRoad": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "Sets the avoidance level for narrow roads (side streets). The value represents the number of round-trip lanes. Roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
                    "example": 0
                  },
                  "avoidUTurn": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "description": "Sets the avoidance level for U-turns. The value represents the number of round-trip lanes. U-turns on roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, U-turns on roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
                    "example": 6
                  },
                  "dem": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines whether to include elevation (Digital Elevation Model) information for each point in the route result. The default is false.",
                    "example": false
                  }
                },
                "required": [
                  "coordType",
                  "endX",
                  "endY",
                  "option",
                  "startX",
                  "startY"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The top-level object representing the entire response of the Multi-Waypoint Standard Route Search API.",
                  "properties": {
                    "route": {
                      "type": "object",
                      "description": "An object containing the detailed data of the route search result.",
                      "properties": {
                        "data": {
                          "type": "object",
                          "description": "An object containing the route's summary information (search option, travel time, distance, fees, etc.) and the list of detailed paths.",
                          "properties": {
                            "option": {
                              "type": "string",
                              "description": "Returns the option used for the route search.",
                              "examples": [
                                "real_traffic",
                                "real_traffic2",
                                "real_traffic_freeroad",
                                "short_distance_priority",
                                "motorcycle",
                                "recommendation",
                                "highway_priority",
                                "personal_mobility"
                              ]
                            },
                            "distance": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The total distance of the entire route in meters (m).",
                              "example": 72183
                            },
                            "taxiFare": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
                              "example": 45000
                            },
                            "totalTaxiFare": {
                              "type": "string",
                              "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
                              "examples": [
                                "4800,7000",
                                "7000"
                              ]
                            },
                            "paths": {
                              "type": "array",
                              "description": "A list (array) of information for each detailed segment that constitutes the route.",
                              "items": {
                                "type": "object",
                                "description": "An object containing information for a single detailed segment (link) of the route.",
                                "properties": {
                                  "coords": {
                                    "type": "array",
                                    "description": "A list (array) of coordinate points that make up this segment.",
                                    "items": {
                                      "type": "object",
                                      "description": "An object containing information for a single coordinate point.",
                                      "properties": {
                                        "x": {
                                          "type": "number",
                                          "format": "double",
                                          "description": "The X coordinate of this point.",
                                          "example": 127.105399
                                        },
                                        "y": {
                                          "type": "number",
                                          "format": "double",
                                          "description": "The Y coordinate of this point.",
                                          "example": 37.5124518
                                        },
                                        "dem": {
                                          "type": "number",
                                          "format": "double",
                                          "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                                          "example": 35.5
                                        }
                                      }
                                    }
                                  },
                                  "speed": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The average speed for this segment.",
                                    "example": 85
                                  },
                                  "distance": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The distance of this segment in meters (m).",
                                    "example": 2800
                                  },
                                  "spend_time": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The estimated travel time in seconds to pass through this segment.",
                                    "example": 120
                                  },
                                  "road_code": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                                    "enum": [
                                      "0",
                                      "1",
                                      "2",
                                      "3",
                                      "4",
                                      "5"
                                    ],
                                    "example": 1
                                  },
                                  "traffic_color": {
                                    "type": "string",
                                    "description": "The color code representing the traffic condition of this segment.",
                                    "example": "#fb3a76"
                                  },
                                  "point_type": {
                                    "type": "string",
                                    "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                                    "examples": [
                                      "S",
                                      "V",
                                      "E",
                                      "N"
                                    ]
                                  }
                                }
                              }
                            },
                            "spend_time": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The total estimated travel time for the entire route in seconds.",
                              "example": 3720
                            },
                            "toll_fee": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The total toll fees incurred on the route.",
                              "example": 3400
                            },
                            "isHighWay": {
                              "type": "boolean",
                              "description": "Indicates whether the route includes a highway."
                            }
                          }
                        }
                      }
                    },
                    "header": {
                      "type": "object",
                      "description": "Shows the status of the API response result.",
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean",
                          "description": "Indicates whether the API request was successful.",
                          "example": true
                        },
                        "resultCode": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                          "example": 0
                        },
                        "resultMessage": {
                          "type": "string",
                          "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/maps/v3.0/appkeys/{appkey}/route-distance-matrix": {
      "post": {
        "tags": [
          "Route"
        ],
        "summary": "Route Distance Matrix",
        "description": "Searches for drivable routes between multiple origin/destination points and returns distance and time information.",
        "operationId": "routeDistanceMatrix",
        "parameters": [
          {
            "name": "appkey",
            "in": "path",
            "description": "API key with permission to use this API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Route Distance Matrix request body.",
                "properties": {
                  "points": {
                    "type": "array",
                    "description": "Represents a list of coordinates. Can receive a minimum of 3 and a maximum of 200 coordinates.",
                    "items": {
                      "type": "object",
                      "description": "Represents X, Y coordinate values.",
                      "properties": {
                        "posX": {
                          "type": "string",
                          "description": "Represents the X coordinate.",
                          "example": "126.9071869221794",
                          "minLength": 1
                        },
                        "posY": {
                          "type": "string",
                          "description": "Represents the Y coordinate.",
                          "example": "37.53078938747262",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "posX",
                        "posY"
                      ]
                    },
                    "maxItems": 200,
                    "minItems": 3
                  },
                  "traffic": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Represents the type of traffic information. Values from 0 to 3 can be used, with a default of 0. 0 means not used, 1 means real-time, 2 means statistical, and 3 means real-time and statistical combined.",
                    "examples": [
                      "0",
                      "1",
                      "2",
                      "3"
                    ]
                  },
                  "time": {
                    "type": "integer",
                    "format": "unix-time",
                    "description": "Represents the request time. This is activated when using statistical traffic information. The time format is Unix time in seconds.",
                    "example": 1723188000
                  }
                },
                "required": [
                  "points"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The final response object for the Distance Matrix API. It contains distance and time matrix information between multiple origins and destinations.",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "description": "Represents the mode of transportation. Currently fixed to 'driving'.",
                      "example": "driving"
                    },
                    "origins": {
                      "type": "array",
                      "description": "The list of longitude and latitude coordinates used in the request.",
                      "example": [
                        "127.0955, 37.4170",
                        "127.0978, 37.4113",
                        "126.8465, 37.5683"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "rows": {
                      "type": "array",
                      "description": "Represents the route results (RouteRow) for each origin as an array. One 'RouteRow' is created for each coordinate in 'origins', forming an N x N matrix structure (where N is the number of coordinates).",
                      "items": {
                        "type": "object",
                        "description": "A row object containing route information (RouteElement) from a single origin to all destinations.",
                        "properties": {
                          "elements": {
                            "type": "array",
                            "description": "Represents the list of route information from a single origin to all destinations (including itself). It is sorted in the same order as the requested destination coordinates. For example, if 3 coordinates are requested, this list will contain 3 RouteElements.",
                            "items": {
                              "type": "object",
                              "description": "An object containing the route search result for a single origin-destination pair (cell).",
                              "properties": {
                                "distance": {
                                  "type": "object",
                                  "description": "Represents the distance information from the origin to the destination.",
                                  "properties": {
                                    "value": {
                                      "type": "integer",
                                      "format": "int64",
                                      "description": "Represents the distance in meters.",
                                      "example": 19971
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "Represents the distance in kilometers.",
                                      "example": "20.0 km"
                                    }
                                  }
                                },
                                "duration": {
                                  "type": "object",
                                  "description": "Represents the duration information from the origin to the destination.",
                                  "properties": {
                                    "value": {
                                      "type": "integer",
                                      "format": "int64",
                                      "description": "Represents the duration in seconds.",
                                      "example": 1437
                                    },
                                    "text": {
                                      "type": "string",
                                      "description": "Represents the duration in minutes.",
                                      "example": "23 mins"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Represents the status of the result. As of version 1.0, only 'OK' is returned. This value may change in future versions.",
                                  "example": "OK"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "header": {
                      "type": "object",
                      "description": "Shows the status of the API response result.",
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean",
                          "description": "Indicates whether the API request was successful.",
                          "example": true
                        },
                        "resultCode": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                          "example": 0
                        },
                        "resultMessage": {
                          "type": "string",
                          "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/maps/v3.0/appkeys/{appkey}/multi-optimal-searches": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Multi Optimal Point Search",
        "description": "Converts a list of coordinates to the nearest designated points for a specific purpose, such as a vehicle entrance, a taxi stand, or a delivery drop-off location, as determined by the type parameter.",
        "operationId": "getMultiOptimalSearches",
        "parameters": [
          {
            "name": "appkey",
            "in": "path",
            "description": "API key with permission to use the corresponding API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Multi optimal point search request body",
                "properties": {
                  "points": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Represents X, Y coordinate values.",
                      "properties": {
                        "posX": {
                          "type": "string",
                          "description": "Represents the X coordinate.",
                          "example": "126.9071869221794",
                          "minLength": 1
                        },
                        "posY": {
                          "type": "string",
                          "description": "Represents the Y coordinate.",
                          "example": "37.53078938747262",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "posX",
                        "posY"
                      ]
                    },
                    "maxItems": 50,
                    "minItems": 1
                  },
                  "option": {
                    "type": "object",
                    "description": "You can set the optimal point properties and maximum number of results.",
                    "properties": {
                      "type": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Represents the optimal point property. Values from 0 to 7 can be used as input, with a default value of 0. 0 means all, 1 is vehicle entrance point, 2 is taxi boarding/alighting point (building), 3 is taxi boarding/alighting point (complex), 4 is delivery vehicle drop-off point, 5 is pedestrian entrance point, 6 is delivery drop-off point (vehicle, motorcycle), and 7 is delivery drop-off point (bicycle, walking).",
                        "examples": [
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7"
                        ]
                      },
                      "count": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Represents the maximum number of result lists. The default value is -1, which returns all result counts. If you input an arbitrary positive integer n, it will return a maximum of n lists.",
                        "example": -1
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Represents the multi optimal point search result values.",
                  "properties": {
                    "origins": {
                      "type": "array",
                      "description": "Represents the list of x, y coordinates sent in the request. It is expressed as a two-dimensional array of double type.",
                      "example": [
                        [
                          126.9071,
                          37.5307
                        ],
                        [
                          127.0275,
                          37.4979
                        ]
                      ],
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "double"
                        }
                      }
                    },
                    "datas": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Represents the multi optimal point search result summary information.",
                        "properties": {
                          "result": {
                            "type": "boolean",
                            "description": "Indicates whether the search result was successful."
                          },
                          "count": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Indicates the number of search results found.",
                            "example": 10
                          },
                          "entrypoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "description": "Represents the detailed contents of the optimal point search results.",
                              "properties": {
                                "x": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "Represents the X coordinate of the optimal point.",
                                  "example": 126.90718692215697
                                },
                                "y": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "Represents the Y coordinate of the optimal point.",
                                  "example": 37.5307893874629
                                },
                                "type": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Represents the optimal point property. The detailed description is the same as the type field description in the request body.",
                                  "examples": [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7"
                                  ]
                                },
                                "angle": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Represents the expected direction angle of a vehicle entering/exiting to the matched road coordinates.",
                                  "example": 341
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "header": {
                      "type": "object",
                      "description": "Shows the status of the API response result.",
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean",
                          "description": "Indicates whether the API request was successful.",
                          "example": true
                        },
                        "resultCode": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                          "example": 0
                        },
                        "resultMessage": {
                          "type": "string",
                          "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/maps/v3.0/appkeys/{appkey}/multi-coordinates": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Multi Geocoding",
        "description": "Receives a list of addresses and returns the corresponding list of coordinate information.",
        "operationId": "getMultiCoordinates",
        "parameters": [
          {
            "name": "appkey",
            "in": "path",
            "description": "API key with permission to use the corresponding API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Multi geocoding request body",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "The data type of the multi geocoding API request body is in array format and can have a length from 1 to 3000.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The id has a 1:1 relationship with the reqid field in the response body and is a unique id to identify multi geocoding requests. The id can be arbitrarily generated and sent by the client. However, the id can only contain uppercase and lowercase English letters and numbers and is limited to 1-10 characters.",
                          "example": "asdf1234",
                          "minLength": 1,
                          "pattern": "^[a-zA-Z0-9]{1,10}"
                        },
                        "query": {
                          "type": "string",
                          "description": "Search keyword",
                          "example": "성남시",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "id",
                        "query"
                      ]
                    },
                    "maxItems": 3000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Shows the multi geocoding API response results.",
                  "properties": {
                    "address": {
                      "type": "object",
                      "description": "Summarizes the result of converting an address to coordinates.",
                      "properties": {
                        "result": {
                          "type": "boolean",
                          "description": "Indicates whether the search result was successful."
                        },
                        "count": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the total number of search results. For example, if the length of the [id, query] array sent in the request body is 10 but the actual search results are 8, the count value is returned as 8.",
                          "example": 10
                        },
                        "geos": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Indicates the search results corresponding to the request id.",
                            "properties": {
                              "found": {
                                "type": "boolean",
                                "description": "Indicates whether results exist.",
                                "examples": [
                                  "true",
                                  "false"
                                ]
                              },
                              "reqid": {
                                "type": "string",
                                "description": "Has a 1:1 relationship with the id included in the request body and is a unique id to identify multi geocoding results.",
                                "example": 1
                              },
                              "query": {
                                "type": "string",
                                "description": "Search keyword",
                                "example": "성남시"
                              },
                              "admcount": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Indicates the number of search results found.",
                                "example": 1
                              },
                              "adm": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "Represents the result of converting an address to coordinate values.",
                                  "properties": {
                                    "type": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                                      "examples": [
                                        "1",
                                        "2",
                                        "3"
                                      ]
                                    },
                                    "posx": {
                                      "type": "string",
                                      "description": "Indicates the X coordinate.",
                                      "example": 127.146083
                                    },
                                    "posy": {
                                      "type": "string",
                                      "description": "Indicates the Y coordinate.",
                                      "example": 37.450129
                                    },
                                    "admcode": {
                                      "type": "string",
                                      "description": "Indicates the legal district code.",
                                      "example": 41131
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "Indicates the full address.",
                                      "example": "경기도 성남시 수정구"
                                    },
                                    "address_sido": {
                                      "type": "string",
                                      "description": "Indicates the city/province.",
                                      "example": "경기도"
                                    },
                                    "address_gu": {
                                      "type": "string",
                                      "description": "Indicates the county/district.",
                                      "example": "성남시 수정구"
                                    },
                                    "address_dong": {
                                      "type": "string",
                                      "description": "Indicates the legal dong name.",
                                      "example": "태평동"
                                    },
                                    "address_haeng": {
                                      "type": "string",
                                      "description": "Indicates the administrative dong name.",
                                      "example": "태평1동"
                                    },
                                    "legalcode": {
                                      "type": "string",
                                      "description": "Indicates the legal dong code.",
                                      "example": 4113110200
                                    },
                                    "haengcode": {
                                      "type": "string",
                                      "description": "Indicates the administrative dong code.",
                                      "example": 4113154000
                                    },
                                    "jibun": {
                                      "type": "string",
                                      "description": "Indicates the lot number.",
                                      "example": 6833
                                    },
                                    "roadname": {
                                      "type": "string",
                                      "description": "Indicates the new address road name.",
                                      "example": "경기도 성남시 수정구 성남대로"
                                    },
                                    "roadjibun": {
                                      "type": "string",
                                      "description": "Indicates the road name address lot number.",
                                      "example": "1241-1"
                                    },
                                    "postcode": {
                                      "type": "string",
                                      "description": "Indicates the postal code. Appears when searching address and lot number together.",
                                      "example": 13110
                                    },
                                    "buildname": {
                                      "type": "string",
                                      "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                                      "example": "태평1동"
                                    },
                                    "accuracy": {
                                      "type": "string",
                                      "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                                      "examples": [
                                        "0",
                                        "1",
                                        "2",
                                        "3"
                                      ]
                                    },
                                    "distance": {
                                      "type": "string",
                                      "description": "Indicates the distance.",
                                      "example": 19109
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "header": {
                      "type": "object",
                      "description": "Shows the status of the API response result.",
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean",
                          "description": "Indicates whether the API request was successful.",
                          "example": true
                        },
                        "resultCode": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                          "example": 0
                        },
                        "resultMessage": {
                          "type": "string",
                          "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/maps/v3.0/appkeys/{appkey}/coordinates": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Geocoding",
        "description": "Returns coordinate information corresponding to the input address.",
        "operationId": "getCoordinates",
        "parameters": [
          {
            "name": "appkey",
            "in": "path",
            "description": "API key with permission to use this API",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search keyword",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "성남시"
          },
          {
            "name": "startposition",
            "in": "query",
            "description": "Search start position. 0 means the first position. Default value is 0.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 0
          },
          {
            "name": "reqcount",
            "in": "query",
            "description": "Request count. When set to 0, it will be set to the maximum count of 100",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 10
          },
          {
            "name": "admcode",
            "in": "query",
            "description": "Administrative district code",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 1100000000
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Shows the result of the Geocoding API response.",
                  "properties": {
                    "address": {
                      "type": "object",
                      "description": "Summarizes the result of converting an address to coordinates.",
                      "properties": {
                        "result": {
                          "type": "boolean",
                          "description": "Indicates whether the search result was successful.",
                          "examples": [
                            "true",
                            "false"
                          ]
                        },
                        "totalcount": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the total number of search results.",
                          "example": 10
                        },
                        "admtotalcount": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the total count of legal/administrative district codes in search results.",
                          "example": 10
                        },
                        "admcount": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the search count corresponding to the reqcount parameter value in Geocoding search conditions.",
                          "example": 10
                        },
                        "res_type": {
                          "type": "string",
                          "description": "Indicates the search result type. Written in the order of POI, CATEGORY, ADM, TEL_POI, with each value represented as Y or N.",
                          "example": "NNYN"
                        },
                        "adm": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Represents the result of converting an address to coordinate values.",
                            "properties": {
                              "type": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                                "examples": [
                                  "1",
                                  "2",
                                  "3"
                                ]
                              },
                              "posx": {
                                "type": "string",
                                "description": "Indicates the X coordinate.",
                                "example": 127.146083
                              },
                              "posy": {
                                "type": "string",
                                "description": "Indicates the Y coordinate.",
                                "example": 37.450129
                              },
                              "admcode": {
                                "type": "string",
                                "description": "Indicates the legal district code.",
                                "example": 41131
                              },
                              "address": {
                                "type": "string",
                                "description": "Indicates the full address.",
                                "example": "경기도 성남시 수정구"
                              },
                              "address_sido": {
                                "type": "string",
                                "description": "Indicates the city/province.",
                                "example": "경기도"
                              },
                              "address_gu": {
                                "type": "string",
                                "description": "Indicates the county/district.",
                                "example": "성남시 수정구"
                              },
                              "address_dong": {
                                "type": "string",
                                "description": "Indicates the legal dong name.",
                                "example": "태평동"
                              },
                              "address_haeng": {
                                "type": "string",
                                "description": "Indicates the administrative dong name.",
                                "example": "태평1동"
                              },
                              "legalcode": {
                                "type": "string",
                                "description": "Indicates the legal dong code.",
                                "example": 4113110200
                              },
                              "haengcode": {
                                "type": "string",
                                "description": "Indicates the administrative dong code.",
                                "example": 4113154000
                              },
                              "jibun": {
                                "type": "string",
                                "description": "Indicates the lot number.",
                                "example": 6833
                              },
                              "roadname": {
                                "type": "string",
                                "description": "Indicates the new address road name.",
                                "example": "경기도 성남시 수정구 성남대로"
                              },
                              "roadjibun": {
                                "type": "string",
                                "description": "Indicates the road name address lot number.",
                                "example": "1241-1"
                              },
                              "postcode": {
                                "type": "string",
                                "description": "Indicates the postal code. Appears when searching address and lot number together.",
                                "example": 13110
                              },
                              "buildname": {
                                "type": "string",
                                "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                                "example": "태평1동"
                              },
                              "accuracy": {
                                "type": "string",
                                "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                                "examples": [
                                  "0",
                                  "1",
                                  "2",
                                  "3"
                                ]
                              },
                              "distance": {
                                "type": "string",
                                "description": "Indicates the distance.",
                                "example": 19109
                              }
                            }
                          }
                        }
                      }
                    },
                    "header": {
                      "type": "object",
                      "description": "Shows the status of the API response result.",
                      "properties": {
                        "isSuccessful": {
                          "type": "boolean",
                          "description": "Indicates whether the API request was successful.",
                          "example": true
                        },
                        "resultCode": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                          "example": 0
                        },
                        "resultMessage": {
                          "type": "string",
                          "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RouteTimeSearchCondition": {
        "type": "object",
        "description": "Search conditions for the General Route Prediction Search.",
        "properties": {
          "option": {
            "type": "string",
            "default": "stats",
            "description": "Specifies the option to use for the route search. 'stats' prioritizes statistical prediction data, 'stats_freeroad' prioritizes free roads, and 'stats_highway' prioritizes highways. The default value is 'stats'.",
            "examples": [
              "stats",
              "stats_freeroad",
              "stats_highway"
            ],
            "pattern": "^(stats|stats_freeroad|stats_highway)$"
          },
          "startX": {
            "type": "string",
            "description": "The X-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "126.9784147",
            "minLength": 1
          },
          "startY": {
            "type": "string",
            "description": "The Y-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "37.5666805",
            "minLength": 1
          },
          "endX": {
            "type": "string",
            "description": "The X-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "127.105399",
            "minLength": 1
          },
          "endY": {
            "type": "string",
            "description": "The Y-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "37.5124518",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "default": "start",
            "description": "Represents the reference time. It determines whether the set time is considered the departure time or the arrival time. 'start' means the search is based on the departure time, and 'end' means it's based on the arrival time. The default value is 'start'.",
            "examples": [
              "start",
              "end"
            ],
            "pattern": "^(start|end)$"
          },
          "year": {
            "type": "integer",
            "format": "YYYY",
            "description": "The reference year for the route search (YYYY). (e.g., 2025)",
            "example": 2025,
            "minimum": 1
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "description": "The reference month for the route search. (1-12)",
            "example": 8,
            "maximum": 12,
            "minimum": 1
          },
          "day": {
            "type": "integer",
            "format": "int32",
            "description": "The reference day for the route search. (1-31)",
            "example": 15,
            "maximum": 31,
            "minimum": 1
          },
          "hour": {
            "type": "integer",
            "format": "int32",
            "description": "The reference hour for the route search, in 24-hour format (0-23).",
            "example": 17,
            "maximum": 23,
            "minimum": 0
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "description": "The reference minute for the route search. (0-59)",
            "example": 30,
            "maximum": 59,
            "minimum": 0
          },
          "via1X": {
            "type": "string",
            "description": "The X-coordinate for the first waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "127.027621"
          },
          "via1Y": {
            "type": "string",
            "description": "The Y-coordinate for the first waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "37.497942"
          },
          "via2X": {
            "type": "string",
            "description": "The X-coordinate for the second waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via2Y": {
            "type": "string",
            "description": "The Y-coordinate for the second waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via3X": {
            "type": "string",
            "description": "The X-coordinate for the third waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via3Y": {
            "type": "string",
            "description": "The Y-coordinate for the third waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via4X": {
            "type": "string",
            "description": "The X-coordinate for the fourth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via4Y": {
            "type": "string",
            "description": "The Y-coordinate for the fourth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via5X": {
            "type": "string",
            "description": "The X-coordinate for the fifth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "via5Y": {
            "type": "string",
            "description": "The Y-coordinate for the fifth waypoint. It follows the coordinate system defined in the 'coordType' parameter."
          },
          "coordType": {
            "type": "string",
            "default": "wgs84",
            "description": "Specifies the coordinate system for all input coordinates (origin, destination, waypoints). 'wgs84' is the international standard coordinate system, and 'tw' is an internal Tinkware coordinate system. The default value is 'wgs84'.",
            "examples": [
              "wgs84",
              "WGS84",
              "tw",
              "TW"
            ],
            "pattern": "^(tw|wgs84|TW|WGS84)$"
          },
          "carType": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "Specifies the vehicle type for the route search. (1: Small car, 2: Medium car, 3: Large car, 4: Large truck, 5: Special truck, 6: Compact car). The default value is 1.",
            "examples": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ]
          },
          "useTrafficColor": {
            "type": "boolean",
            "default": true,
            "description": "Determines whether to include real-time traffic status (e.g., clear, slow, congested) as color information in the route result. The default value is true.",
            "example": true
          },
          "guideTop": {
            "type": "integer",
            "format": "int32",
            "default": 5,
            "description": "The maximum number of major guidance points (Guide Points) to include in the route result. The default value is 5.",
            "example": 5
          },
          "useGuide": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to include detailed turn-by-turn navigation information in the route result. The default value is false.",
            "example": false
          },
          "groupByTrafficColor": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to group the detailed path list (paths) by traffic color. The default value is false.",
            "example": false
          },
          "beforeCount": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The number of additional routes to search at time intervals set by the 'interval' parameter *before* the reference time. (e.g., if beforeCount=2 and interval=15, it searches for routes 15 and 30 minutes before the reference time). The default is 0.",
            "example": 2
          },
          "afterCount": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The number of additional routes to search at time intervals set by the 'interval' parameter *after* the reference time. (e.g., if afterCount=2 and interval=15, it searches for routes 15 and 30 minutes after the reference time). The default is 0.",
            "example": 2
          },
          "useTaxifare": {
            "type": "string",
            "default": "0",
            "description": "Determines whether to retrieve the estimated taxi fare for the route. (0: Do not retrieve, 1: Standard taxi, 2: Deluxe taxi, 3: Both standard and deluxe). The default is 0.",
            "examples": [
              "0",
              "1",
              "2",
              "3"
            ]
          },
          "interval": {
            "type": "integer",
            "format": "int32",
            "default": 15,
            "description": "Sets the time interval in minutes to be applied when using 'beforeCount' or 'afterCount'. The default is 15 minutes.",
            "example": 15
          },
          "useStartDirection": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to prioritize the vehicle's direction of travel at the start of the route search. The default is false. This can be useful when the precise 'angle' of the vehicle is unknown.",
            "example": false
          },
          "searchByAddress": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to perform an address-based route search. The default value is false.",
            "example": false
          },
          "useAngle": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to use the departure angle in the search. If set to true, the 'angle' value is required. The default is false. (true: Prioritize driving direction, false: Do not prioritize driving direction).",
            "example": false
          },
          "angle": {
            "type": "integer",
            "format": "int32",
            "description": "The departure angle of the vehicle, applied when 'useAngle' is true. It takes a value between 0 and 359 degrees, with 0 representing true north, increasing clockwise.",
            "example": 90
          },
          "usageType": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "A type that distinguishes the usage purpose of the API service. (0: General, 1: Taxi). The default is 0.",
            "examples": [
              "0",
              "1"
            ]
          },
          "carWeight": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The total weight of the vehicle in kilograms (kg). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
            "example": 4500
          },
          "carHeight": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The height of the vehicle in centimeters (cm). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
            "example": 250
          },
          "avoidWaterSourceArea": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to avoid water source protection areas during the route search. The default is false.",
            "example": false
          },
          "avoidNarrowRoad": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Sets the avoidance level for narrow roads (side streets). The value represents the number of round-trip lanes. Roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
            "example": 0
          },
          "avoidUTurn": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Sets the avoidance level for U-turns. The value represents the number of round-trip lanes. U-turns on roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, U-turns on roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
            "example": 6
          },
          "dem": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to include elevation (Digital Elevation Model) information for each point in the route result. The default is false.",
            "example": false
          }
        },
        "required": [
          "day",
          "endX",
          "endY",
          "hour",
          "minutes",
          "month",
          "startX",
          "startY",
          "type",
          "year"
        ]
      },
      "Header": {
        "type": "object",
        "description": "Shows the status of the API response result.",
        "properties": {
          "isSuccessful": {
            "type": "boolean",
            "description": "Indicates whether the API request was successful.",
            "example": true
          },
          "resultCode": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
            "example": 0
          },
          "resultMessage": {
            "type": "string",
            "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
          }
        }
      },
      "RoutePath": {
        "type": "object",
        "description": "An object containing information for a single detailed segment (link) of the route.",
        "properties": {
          "coords": {
            "type": "array",
            "description": "A list (array) of coordinate points that make up this segment.",
            "items": {
              "type": "object",
              "description": "An object containing information for a single coordinate point.",
              "properties": {
                "x": {
                  "type": "number",
                  "format": "double",
                  "description": "The X coordinate of this point.",
                  "example": 127.105399
                },
                "y": {
                  "type": "number",
                  "format": "double",
                  "description": "The Y coordinate of this point.",
                  "example": 37.5124518
                },
                "dem": {
                  "type": "number",
                  "format": "double",
                  "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                  "example": 35.5
                }
              }
            }
          },
          "speed": {
            "type": "integer",
            "format": "int32",
            "description": "The average speed for this segment.",
            "example": 85
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "description": "The distance of this segment in meters (m).",
            "example": 2800
          },
          "spend_time": {
            "type": "integer",
            "format": "int32",
            "description": "The estimated travel time in seconds to pass through this segment.",
            "example": 120
          },
          "road_code": {
            "type": "integer",
            "format": "int32",
            "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
            "enum": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "example": 1
          },
          "traffic_color": {
            "type": "string",
            "description": "The color code representing the traffic condition of this segment.",
            "example": "#fb3a76"
          },
          "point_type": {
            "type": "string",
            "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
            "examples": [
              "S",
              "V",
              "E",
              "N"
            ]
          }
        }
      },
      "RouteTimeData": {
        "type": "object",
        "description": "An object containing the detailed data of the route prediction search result.",
        "properties": {
          "data": {
            "type": "object",
            "description": "The core data object containing summary information and a list of detailed path segments for the route search result.",
            "properties": {
              "distance": {
                "type": "integer",
                "format": "int32",
                "description": "The total distance of the entire route in meters (m).",
                "example": 72183
              },
              "taxiFare": {
                "type": "integer",
                "format": "int32",
                "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
                "example": 45000
              },
              "totalTaxiFare": {
                "type": "string",
                "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
                "examples": [
                  "4800,7000",
                  "7000"
                ]
              },
              "times": {
                "type": "array",
                "description": "A list (array) of route summaries for each time slot searched by the 'beforeCount' and 'afterCount' request parameters. If both are 0, an empty array is returned.",
                "items": {
                  "type": "object",
                  "description": "An object containing the route summary for each time slot, based on the 'interval' parameter. This object is returned when 'beforeCount' or 'afterCount' is set.",
                  "properties": {
                    "index": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The sequence number (index) of the searched time slot. '0' indicates the reference time set in the request. As the index value increases, the reference time based on the interval also increases.",
                      "examples": [
                        "-2",
                        "-1",
                        "0",
                        "1",
                        "2"
                      ]
                    },
                    "distance": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total distance in meters (m) for a departure in this time slot.",
                      "example": 72183
                    },
                    "spend_time": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total estimated travel time in seconds for a departure in this time slot.",
                      "example": 3780
                    },
                    "start_time": {
                      "type": "object",
                      "description": "An object representing a date and time.",
                      "properties": {
                        "year": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The year information (YYYY).",
                          "example": 2019
                        },
                        "month": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The month information (1-12).",
                          "example": 11
                        },
                        "day": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The day information (1-31).",
                          "example": 26
                        },
                        "hour": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The hour information (0-23).",
                          "example": 11
                        },
                        "minutes": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The minute information (0-59).",
                          "example": 0
                        }
                      }
                    },
                    "end_time": {
                      "type": "object",
                      "description": "An object representing a date and time.",
                      "properties": {
                        "year": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The year information (YYYY).",
                          "example": 2019
                        },
                        "month": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The month information (1-12).",
                          "example": 11
                        },
                        "day": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The day information (1-31).",
                          "example": 26
                        },
                        "hour": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The hour information (0-23).",
                          "example": 11
                        },
                        "minutes": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The minute information (0-59).",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              },
              "paths": {
                "type": "array",
                "description": "A list (array) of information for each detailed segment that constitutes the route.",
                "items": {
                  "type": "object",
                  "description": "An object containing information for a single detailed segment (link) of the route.",
                  "properties": {
                    "coords": {
                      "type": "array",
                      "description": "A list (array) of coordinate points that make up this segment.",
                      "items": {
                        "type": "object",
                        "description": "An object containing information for a single coordinate point.",
                        "properties": {
                          "x": {
                            "type": "number",
                            "format": "double",
                            "description": "The X coordinate of this point.",
                            "example": 127.105399
                          },
                          "y": {
                            "type": "number",
                            "format": "double",
                            "description": "The Y coordinate of this point.",
                            "example": 37.5124518
                          },
                          "dem": {
                            "type": "number",
                            "format": "double",
                            "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                            "example": 35.5
                          }
                        }
                      }
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The average speed for this segment.",
                      "example": 85
                    },
                    "distance": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The distance of this segment in meters (m).",
                      "example": 2800
                    },
                    "spend_time": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The estimated travel time in seconds to pass through this segment.",
                      "example": 120
                    },
                    "road_code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                      "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5"
                      ],
                      "example": 1
                    },
                    "traffic_color": {
                      "type": "string",
                      "description": "The color code representing the traffic condition of this segment.",
                      "example": "#fb3a76"
                    },
                    "point_type": {
                      "type": "string",
                      "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                      "examples": [
                        "S",
                        "V",
                        "E",
                        "N"
                      ]
                    }
                  }
                }
              },
              "spend_time": {
                "type": "integer",
                "format": "int32",
                "description": "The total estimated travel time for the entire route in seconds.",
                "example": 3720
              },
              "toll_fee": {
                "type": "integer",
                "format": "int32",
                "description": "The total toll fees incurred on the route.",
                "example": 3400
              }
            }
          }
        }
      },
      "RouteTimeInterval": {
        "type": "object",
        "description": "An object containing the route summary for each time slot, based on the 'interval' parameter. This object is returned when 'beforeCount' or 'afterCount' is set.",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The sequence number (index) of the searched time slot. '0' indicates the reference time set in the request. As the index value increases, the reference time based on the interval also increases.",
            "examples": [
              "-2",
              "-1",
              "0",
              "1",
              "2"
            ]
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "description": "The total distance in meters (m) for a departure in this time slot.",
            "example": 72183
          },
          "spend_time": {
            "type": "integer",
            "format": "int32",
            "description": "The total estimated travel time in seconds for a departure in this time slot.",
            "example": 3780
          },
          "start_time": {
            "type": "object",
            "description": "An object representing a date and time.",
            "properties": {
              "year": {
                "type": "integer",
                "format": "int32",
                "description": "The year information (YYYY).",
                "example": 2019
              },
              "month": {
                "type": "integer",
                "format": "int32",
                "description": "The month information (1-12).",
                "example": 11
              },
              "day": {
                "type": "integer",
                "format": "int32",
                "description": "The day information (1-31).",
                "example": 26
              },
              "hour": {
                "type": "integer",
                "format": "int32",
                "description": "The hour information (0-23).",
                "example": 11
              },
              "minutes": {
                "type": "integer",
                "format": "int32",
                "description": "The minute information (0-59).",
                "example": 0
              }
            }
          },
          "end_time": {
            "type": "object",
            "description": "An object representing a date and time.",
            "properties": {
              "year": {
                "type": "integer",
                "format": "int32",
                "description": "The year information (YYYY).",
                "example": 2019
              },
              "month": {
                "type": "integer",
                "format": "int32",
                "description": "The month information (1-12).",
                "example": 11
              },
              "day": {
                "type": "integer",
                "format": "int32",
                "description": "The day information (1-31).",
                "example": 26
              },
              "hour": {
                "type": "integer",
                "format": "int32",
                "description": "The hour information (0-23).",
                "example": 11
              },
              "minutes": {
                "type": "integer",
                "format": "int32",
                "description": "The minute information (0-59).",
                "example": 0
              }
            }
          }
        }
      },
      "RouteTimeResponse": {
        "type": "object",
        "description": "The top-level object representing the entire response of the Route Prediction Time Search API.",
        "properties": {
          "route": {
            "type": "object",
            "description": "An object containing the detailed data of the route prediction search result.",
            "properties": {
              "data": {
                "type": "object",
                "description": "The core data object containing summary information and a list of detailed path segments for the route search result.",
                "properties": {
                  "distance": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total distance of the entire route in meters (m).",
                    "example": 72183
                  },
                  "taxiFare": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
                    "example": 45000
                  },
                  "totalTaxiFare": {
                    "type": "string",
                    "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
                    "examples": [
                      "4800,7000",
                      "7000"
                    ]
                  },
                  "times": {
                    "type": "array",
                    "description": "A list (array) of route summaries for each time slot searched by the 'beforeCount' and 'afterCount' request parameters. If both are 0, an empty array is returned.",
                    "items": {
                      "type": "object",
                      "description": "An object containing the route summary for each time slot, based on the 'interval' parameter. This object is returned when 'beforeCount' or 'afterCount' is set.",
                      "properties": {
                        "index": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The sequence number (index) of the searched time slot. '0' indicates the reference time set in the request. As the index value increases, the reference time based on the interval also increases.",
                          "examples": [
                            "-2",
                            "-1",
                            "0",
                            "1",
                            "2"
                          ]
                        },
                        "distance": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total distance in meters (m) for a departure in this time slot.",
                          "example": 72183
                        },
                        "spend_time": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total estimated travel time in seconds for a departure in this time slot.",
                          "example": 3780
                        },
                        "start_time": {
                          "type": "object",
                          "description": "An object representing a date and time.",
                          "properties": {
                            "year": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The year information (YYYY).",
                              "example": 2019
                            },
                            "month": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The month information (1-12).",
                              "example": 11
                            },
                            "day": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The day information (1-31).",
                              "example": 26
                            },
                            "hour": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The hour information (0-23).",
                              "example": 11
                            },
                            "minutes": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The minute information (0-59).",
                              "example": 0
                            }
                          }
                        },
                        "end_time": {
                          "type": "object",
                          "description": "An object representing a date and time.",
                          "properties": {
                            "year": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The year information (YYYY).",
                              "example": 2019
                            },
                            "month": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The month information (1-12).",
                              "example": 11
                            },
                            "day": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The day information (1-31).",
                              "example": 26
                            },
                            "hour": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The hour information (0-23).",
                              "example": 11
                            },
                            "minutes": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The minute information (0-59).",
                              "example": 0
                            }
                          }
                        }
                      }
                    }
                  },
                  "paths": {
                    "type": "array",
                    "description": "A list (array) of information for each detailed segment that constitutes the route.",
                    "items": {
                      "type": "object",
                      "description": "An object containing information for a single detailed segment (link) of the route.",
                      "properties": {
                        "coords": {
                          "type": "array",
                          "description": "A list (array) of coordinate points that make up this segment.",
                          "items": {
                            "type": "object",
                            "description": "An object containing information for a single coordinate point.",
                            "properties": {
                              "x": {
                                "type": "number",
                                "format": "double",
                                "description": "The X coordinate of this point.",
                                "example": 127.105399
                              },
                              "y": {
                                "type": "number",
                                "format": "double",
                                "description": "The Y coordinate of this point.",
                                "example": 37.5124518
                              },
                              "dem": {
                                "type": "number",
                                "format": "double",
                                "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                                "example": 35.5
                              }
                            }
                          }
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The average speed for this segment.",
                          "example": 85
                        },
                        "distance": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The distance of this segment in meters (m).",
                          "example": 2800
                        },
                        "spend_time": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The estimated travel time in seconds to pass through this segment.",
                          "example": 120
                        },
                        "road_code": {
                          "type": "integer",
                          "format": "int32",
                          "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                          "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5"
                          ],
                          "example": 1
                        },
                        "traffic_color": {
                          "type": "string",
                          "description": "The color code representing the traffic condition of this segment.",
                          "example": "#fb3a76"
                        },
                        "point_type": {
                          "type": "string",
                          "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                          "examples": [
                            "S",
                            "V",
                            "E",
                            "N"
                          ]
                        }
                      }
                    }
                  },
                  "spend_time": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total estimated travel time for the entire route in seconds.",
                    "example": 3720
                  },
                  "toll_fee": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total toll fees incurred on the route.",
                    "example": 3400
                  }
                }
              }
            }
          },
          "header": {
            "type": "object",
            "description": "Shows the status of the API response result.",
            "properties": {
              "isSuccessful": {
                "type": "boolean",
                "description": "Indicates whether the API request was successful.",
                "example": true
              },
              "resultCode": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                "example": 0
              },
              "resultMessage": {
                "type": "string",
                "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
              }
            }
          }
        }
      },
      "RouteTimeStatistics": {
        "type": "object",
        "description": "The core data object containing summary information and a list of detailed path segments for the route search result.",
        "properties": {
          "distance": {
            "type": "integer",
            "format": "int32",
            "description": "The total distance of the entire route in meters (m).",
            "example": 72183
          },
          "taxiFare": {
            "type": "integer",
            "format": "int32",
            "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
            "example": 45000
          },
          "totalTaxiFare": {
            "type": "string",
            "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
            "examples": [
              "4800,7000",
              "7000"
            ]
          },
          "times": {
            "type": "array",
            "description": "A list (array) of route summaries for each time slot searched by the 'beforeCount' and 'afterCount' request parameters. If both are 0, an empty array is returned.",
            "items": {
              "type": "object",
              "description": "An object containing the route summary for each time slot, based on the 'interval' parameter. This object is returned when 'beforeCount' or 'afterCount' is set.",
              "properties": {
                "index": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The sequence number (index) of the searched time slot. '0' indicates the reference time set in the request. As the index value increases, the reference time based on the interval also increases.",
                  "examples": [
                    "-2",
                    "-1",
                    "0",
                    "1",
                    "2"
                  ]
                },
                "distance": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The total distance in meters (m) for a departure in this time slot.",
                  "example": 72183
                },
                "spend_time": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The total estimated travel time in seconds for a departure in this time slot.",
                  "example": 3780
                },
                "start_time": {
                  "type": "object",
                  "description": "An object representing a date and time.",
                  "properties": {
                    "year": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The year information (YYYY).",
                      "example": 2019
                    },
                    "month": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The month information (1-12).",
                      "example": 11
                    },
                    "day": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The day information (1-31).",
                      "example": 26
                    },
                    "hour": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The hour information (0-23).",
                      "example": 11
                    },
                    "minutes": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The minute information (0-59).",
                      "example": 0
                    }
                  }
                },
                "end_time": {
                  "type": "object",
                  "description": "An object representing a date and time.",
                  "properties": {
                    "year": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The year information (YYYY).",
                      "example": 2019
                    },
                    "month": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The month information (1-12).",
                      "example": 11
                    },
                    "day": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The day information (1-31).",
                      "example": 26
                    },
                    "hour": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The hour information (0-23).",
                      "example": 11
                    },
                    "minutes": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The minute information (0-59).",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "paths": {
            "type": "array",
            "description": "A list (array) of information for each detailed segment that constitutes the route.",
            "items": {
              "type": "object",
              "description": "An object containing information for a single detailed segment (link) of the route.",
              "properties": {
                "coords": {
                  "type": "array",
                  "description": "A list (array) of coordinate points that make up this segment.",
                  "items": {
                    "type": "object",
                    "description": "An object containing information for a single coordinate point.",
                    "properties": {
                      "x": {
                        "type": "number",
                        "format": "double",
                        "description": "The X coordinate of this point.",
                        "example": 127.105399
                      },
                      "y": {
                        "type": "number",
                        "format": "double",
                        "description": "The Y coordinate of this point.",
                        "example": 37.5124518
                      },
                      "dem": {
                        "type": "number",
                        "format": "double",
                        "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                        "example": 35.5
                      }
                    }
                  }
                },
                "speed": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The average speed for this segment.",
                  "example": 85
                },
                "distance": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The distance of this segment in meters (m).",
                  "example": 2800
                },
                "spend_time": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The estimated travel time in seconds to pass through this segment.",
                  "example": 120
                },
                "road_code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "example": 1
                },
                "traffic_color": {
                  "type": "string",
                  "description": "The color code representing the traffic condition of this segment.",
                  "example": "#fb3a76"
                },
                "point_type": {
                  "type": "string",
                  "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                  "examples": [
                    "S",
                    "V",
                    "E",
                    "N"
                  ]
                }
              }
            }
          },
          "spend_time": {
            "type": "integer",
            "format": "int32",
            "description": "The total estimated travel time for the entire route in seconds.",
            "example": 3720
          },
          "toll_fee": {
            "type": "integer",
            "format": "int32",
            "description": "The total toll fees incurred on the route.",
            "example": 3400
          }
        }
      },
      "RouteVertex": {
        "type": "object",
        "description": "An object containing information for a single coordinate point.",
        "properties": {
          "x": {
            "type": "number",
            "format": "double",
            "description": "The X coordinate of this point.",
            "example": 127.105399
          },
          "y": {
            "type": "number",
            "format": "double",
            "description": "The Y coordinate of this point.",
            "example": 37.5124518
          },
          "dem": {
            "type": "number",
            "format": "double",
            "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
            "example": 35.5
          }
        }
      },
      "YearMonthDayTime": {
        "type": "object",
        "description": "An object representing a date and time.",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32",
            "description": "The year information (YYYY).",
            "example": 2019
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "description": "The month information (1-12).",
            "example": 11
          },
          "day": {
            "type": "integer",
            "format": "int32",
            "description": "The day information (1-31).",
            "example": 26
          },
          "hour": {
            "type": "integer",
            "format": "int32",
            "description": "The hour information (0-23).",
            "example": 11
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "description": "The minute information (0-59).",
            "example": 0
          }
        }
      },
      "RouteNormalViaRequest": {
        "type": "object",
        "description": "Search conditions for the multi-waypoint route search.",
        "properties": {
          "startX": {
            "type": "string",
            "description": "The X-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "126.9784147",
            "minLength": 1
          },
          "startY": {
            "type": "string",
            "description": "The Y-coordinate for the starting point (origin) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "37.5666805",
            "minLength": 1
          },
          "endX": {
            "type": "string",
            "description": "The X-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "127.105399",
            "minLength": 1
          },
          "endY": {
            "type": "string",
            "description": "The Y-coordinate for the endpoint (destination) of the route search. It follows the coordinate system defined in the 'coordType' parameter.",
            "example": "37.5124518",
            "minLength": 1
          },
          "option": {
            "type": "string",
            "description": "Route search option. (Only one can be selected: real_traffic: Real-time Recommendation 1, real_traffic2: Real-time Recommendation 2, real_traffic_freeroad: Real-time Rec. + Free roads, short_distance_priority: Shortest distance, motorcycle: Motorcycle, recommendation: Recommended, highway_priority: Highway priority, personal_mobility: Optimized for Personal Mobility).",
            "examples": [
              "real_traffic",
              "real_traffic2",
              "real_traffic_freeroad",
              "short_distance_priority",
              "motorcycle",
              "recommendation",
              "highway_priority",
              "personal_mobility"
            ],
            "minLength": 1
          },
          "coordType": {
            "type": "string",
            "default": "wgs84",
            "description": "Specifies the coordinate system for all input coordinates (origin, destination, waypoints). 'wgs84' is the international standard coordinate system, and 'tw' is an internal Tinkware coordinate system. The default value is 'wgs84'.",
            "examples": [
              "wgs84",
              "WGS84",
              "tw",
              "TW"
            ],
            "minLength": 1,
            "pattern": "^(tw|wgs84|TW|WGS84)$"
          },
          "viaList": {
            "type": "array",
            "description": "A list (array) of waypoint information. Up to 100 waypoints can be set.",
            "items": {
              "type": "object",
              "description": "An object containing the coordinate information for a single waypoint.",
              "properties": {
                "viaX": {
                  "type": "string",
                  "description": "The X-coordinate of the waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
                  "minLength": 1
                },
                "viaY": {
                  "type": "string",
                  "description": "The Y-coordinate of the waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
                  "minLength": 1
                }
              },
              "required": [
                "viaX",
                "viaY"
              ]
            },
            "maxItems": 100,
            "maximum": 100,
            "minItems": 0
          },
          "useAngle": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to use the departure angle in the search. If set to true, the 'angle' value is required. The default is false. (true: Prioritize driving direction, false: Do not prioritize driving direction).",
            "example": false
          },
          "angle": {
            "type": "integer",
            "format": "int32",
            "description": "The departure angle of the vehicle, applied when 'useAngle' is true. It takes a value between 0 and 359 degrees, with 0 representing true north, increasing clockwise.",
            "example": 90
          },
          "carType": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "Specifies the vehicle type for the route search. (1: Small car, 2: Medium car, 3: Large car, 4: Large truck, 5: Special truck, 6: Compact car). The default value is 1.",
            "examples": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ]
          },
          "guideTop": {
            "type": "integer",
            "format": "int32",
            "default": 5,
            "description": "The maximum number of major guidance points (Guide Points) to include in the route result. The default value is 5.",
            "example": 5
          },
          "useGuide": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to include detailed turn-by-turn navigation information in the route result. The default value is false.",
            "example": false
          },
          "groupByTrafficColor": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to group the detailed path list (paths) by traffic color. The default value is false.",
            "example": false
          },
          "useTaxifare": {
            "type": "string",
            "default": "0",
            "description": "Determines whether to retrieve the estimated taxi fare for the route. (0: Do not retrieve, 1: Standard taxi, 2: Deluxe taxi, 3: Both standard and deluxe). The default is 0.",
            "examples": [
              "0",
              "1",
              "2",
              "3"
            ]
          },
          "useStartDirection": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to prioritize the vehicle's direction of travel at the start of the route search. The default is false. This can be useful when the precise 'angle' of the vehicle is unknown.",
            "example": false
          },
          "searchByAddress": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to perform an address-based route search. The default value is false.",
            "example": false
          },
          "usageType": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "A type that distinguishes the usage purpose of the API service. (0: General, 1: Taxi). The default is 0.",
            "examples": [
              "0",
              "1"
            ]
          },
          "carWeight": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The total weight of the vehicle in kilograms (kg). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
            "example": 4500
          },
          "carHeight": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The height of the vehicle in centimeters (cm). This is applied when 'carType' is 4 (Large truck) or 5 (Special truck).",
            "example": 250
          },
          "avoidWaterSourceArea": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to avoid water source protection areas during the route search. The default is false.",
            "example": false
          },
          "avoidNarrowRoad": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Sets the avoidance level for narrow roads (side streets). The value represents the number of round-trip lanes. Roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
            "example": 0
          },
          "avoidUTurn": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Sets the avoidance level for U-turns. The value represents the number of round-trip lanes. U-turns on roads with this number of lanes or fewer will be avoided. (e.g., if the value is 6, U-turns on roads with 6 or fewer round-trip lanes will be avoided). The default is 0.",
            "example": 6
          },
          "dem": {
            "type": "boolean",
            "default": false,
            "description": "Determines whether to include elevation (Digital Elevation Model) information for each point in the route result. The default is false.",
            "example": false
          }
        },
        "required": [
          "coordType",
          "endX",
          "endY",
          "option",
          "startX",
          "startY"
        ]
      },
      "RouteVia": {
        "type": "object",
        "description": "An object containing the coordinate information for a single waypoint.",
        "properties": {
          "viaX": {
            "type": "string",
            "description": "The X-coordinate of the waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
            "minLength": 1
          },
          "viaY": {
            "type": "string",
            "description": "The Y-coordinate of the waypoint. It follows the coordinate system defined in the 'coordType' parameter.",
            "minLength": 1
          }
        },
        "required": [
          "viaX",
          "viaY"
        ]
      },
      "RouteData": {
        "type": "object",
        "description": "An object containing the route's summary information (search option, travel time, distance, fees, etc.) and the list of detailed paths.",
        "properties": {
          "option": {
            "type": "string",
            "description": "Returns the option used for the route search.",
            "examples": [
              "real_traffic",
              "real_traffic2",
              "real_traffic_freeroad",
              "short_distance_priority",
              "motorcycle",
              "recommendation",
              "highway_priority",
              "personal_mobility"
            ]
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "description": "The total distance of the entire route in meters (m).",
            "example": 72183
          },
          "taxiFare": {
            "type": "integer",
            "format": "int32",
            "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
            "example": 45000
          },
          "totalTaxiFare": {
            "type": "string",
            "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
            "examples": [
              "4800,7000",
              "7000"
            ]
          },
          "paths": {
            "type": "array",
            "description": "A list (array) of information for each detailed segment that constitutes the route.",
            "items": {
              "type": "object",
              "description": "An object containing information for a single detailed segment (link) of the route.",
              "properties": {
                "coords": {
                  "type": "array",
                  "description": "A list (array) of coordinate points that make up this segment.",
                  "items": {
                    "type": "object",
                    "description": "An object containing information for a single coordinate point.",
                    "properties": {
                      "x": {
                        "type": "number",
                        "format": "double",
                        "description": "The X coordinate of this point.",
                        "example": 127.105399
                      },
                      "y": {
                        "type": "number",
                        "format": "double",
                        "description": "The Y coordinate of this point.",
                        "example": 37.5124518
                      },
                      "dem": {
                        "type": "number",
                        "format": "double",
                        "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                        "example": 35.5
                      }
                    }
                  }
                },
                "speed": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The average speed for this segment.",
                  "example": 85
                },
                "distance": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The distance of this segment in meters (m).",
                  "example": 2800
                },
                "spend_time": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The estimated travel time in seconds to pass through this segment.",
                  "example": 120
                },
                "road_code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                  "enum": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "example": 1
                },
                "traffic_color": {
                  "type": "string",
                  "description": "The color code representing the traffic condition of this segment.",
                  "example": "#fb3a76"
                },
                "point_type": {
                  "type": "string",
                  "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                  "examples": [
                    "S",
                    "V",
                    "E",
                    "N"
                  ]
                }
              }
            }
          },
          "spend_time": {
            "type": "integer",
            "format": "int32",
            "description": "The total estimated travel time for the entire route in seconds.",
            "example": 3720
          },
          "toll_fee": {
            "type": "integer",
            "format": "int32",
            "description": "The total toll fees incurred on the route.",
            "example": 3400
          },
          "isHighWay": {
            "type": "boolean",
            "description": "Indicates whether the route includes a highway."
          }
        }
      },
      "RouteNormalViaData": {
        "type": "object",
        "description": "An object containing the detailed data of the route search result.",
        "properties": {
          "data": {
            "type": "object",
            "description": "An object containing the route's summary information (search option, travel time, distance, fees, etc.) and the list of detailed paths.",
            "properties": {
              "option": {
                "type": "string",
                "description": "Returns the option used for the route search.",
                "examples": [
                  "real_traffic",
                  "real_traffic2",
                  "real_traffic_freeroad",
                  "short_distance_priority",
                  "motorcycle",
                  "recommendation",
                  "highway_priority",
                  "personal_mobility"
                ]
              },
              "distance": {
                "type": "integer",
                "format": "int32",
                "description": "The total distance of the entire route in meters (m).",
                "example": 72183
              },
              "taxiFare": {
                "type": "integer",
                "format": "int32",
                "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
                "example": 45000
              },
              "totalTaxiFare": {
                "type": "string",
                "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
                "examples": [
                  "4800,7000",
                  "7000"
                ]
              },
              "paths": {
                "type": "array",
                "description": "A list (array) of information for each detailed segment that constitutes the route.",
                "items": {
                  "type": "object",
                  "description": "An object containing information for a single detailed segment (link) of the route.",
                  "properties": {
                    "coords": {
                      "type": "array",
                      "description": "A list (array) of coordinate points that make up this segment.",
                      "items": {
                        "type": "object",
                        "description": "An object containing information for a single coordinate point.",
                        "properties": {
                          "x": {
                            "type": "number",
                            "format": "double",
                            "description": "The X coordinate of this point.",
                            "example": 127.105399
                          },
                          "y": {
                            "type": "number",
                            "format": "double",
                            "description": "The Y coordinate of this point.",
                            "example": 37.5124518
                          },
                          "dem": {
                            "type": "number",
                            "format": "double",
                            "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                            "example": 35.5
                          }
                        }
                      }
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The average speed for this segment.",
                      "example": 85
                    },
                    "distance": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The distance of this segment in meters (m).",
                      "example": 2800
                    },
                    "spend_time": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The estimated travel time in seconds to pass through this segment.",
                      "example": 120
                    },
                    "road_code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                      "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5"
                      ],
                      "example": 1
                    },
                    "traffic_color": {
                      "type": "string",
                      "description": "The color code representing the traffic condition of this segment.",
                      "example": "#fb3a76"
                    },
                    "point_type": {
                      "type": "string",
                      "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                      "examples": [
                        "S",
                        "V",
                        "E",
                        "N"
                      ]
                    }
                  }
                }
              },
              "spend_time": {
                "type": "integer",
                "format": "int32",
                "description": "The total estimated travel time for the entire route in seconds.",
                "example": 3720
              },
              "toll_fee": {
                "type": "integer",
                "format": "int32",
                "description": "The total toll fees incurred on the route.",
                "example": 3400
              },
              "isHighWay": {
                "type": "boolean",
                "description": "Indicates whether the route includes a highway."
              }
            }
          }
        }
      },
      "RouteNormalViaResponse": {
        "type": "object",
        "description": "The top-level object representing the entire response of the Multi-Waypoint Standard Route Search API.",
        "properties": {
          "route": {
            "type": "object",
            "description": "An object containing the detailed data of the route search result.",
            "properties": {
              "data": {
                "type": "object",
                "description": "An object containing the route's summary information (search option, travel time, distance, fees, etc.) and the list of detailed paths.",
                "properties": {
                  "option": {
                    "type": "string",
                    "description": "Returns the option used for the route search.",
                    "examples": [
                      "real_traffic",
                      "real_traffic2",
                      "real_traffic_freeroad",
                      "short_distance_priority",
                      "motorcycle",
                      "recommendation",
                      "highway_priority",
                      "personal_mobility"
                    ]
                  },
                  "distance": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total distance of the entire route in meters (m).",
                    "example": 72183
                  },
                  "taxiFare": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Estimated taxi fare information. A value is returned only when the 'useTaxifare' request parameter is 1 (standard) or 2 (deluxe). Using 'totalTaxiFare' is recommended.",
                    "example": 45000
                  },
                  "totalTaxiFare": {
                    "type": "string",
                    "description": "The estimated taxi fare provided as a string, summarizing all types of fares. The content varies depending on the 'useTaxifare' request parameter. If 'useTaxifare' is 0, this key-value pair is not returned. For values 1 or 2, the respective fare is returned. For value 3, fares are returned in the format 'amount,amount'.",
                    "examples": [
                      "4800,7000",
                      "7000"
                    ]
                  },
                  "paths": {
                    "type": "array",
                    "description": "A list (array) of information for each detailed segment that constitutes the route.",
                    "items": {
                      "type": "object",
                      "description": "An object containing information for a single detailed segment (link) of the route.",
                      "properties": {
                        "coords": {
                          "type": "array",
                          "description": "A list (array) of coordinate points that make up this segment.",
                          "items": {
                            "type": "object",
                            "description": "An object containing information for a single coordinate point.",
                            "properties": {
                              "x": {
                                "type": "number",
                                "format": "double",
                                "description": "The X coordinate of this point.",
                                "example": 127.105399
                              },
                              "y": {
                                "type": "number",
                                "format": "double",
                                "description": "The Y coordinate of this point.",
                                "example": 37.5124518
                              },
                              "dem": {
                                "type": "number",
                                "format": "double",
                                "description": "The elevation (Digital Elevation Model) information for the point. This is returned only when the 'dem' request parameter is 'true'.",
                                "example": 35.5
                              }
                            }
                          }
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The average speed for this segment.",
                          "example": 85
                        },
                        "distance": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The distance of this segment in meters (m).",
                          "example": 2800
                        },
                        "spend_time": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The estimated travel time in seconds to pass through this segment.",
                          "example": 120
                        },
                        "road_code": {
                          "type": "integer",
                          "format": "int32",
                          "description": "A code that distinguishes the type of road. (0: Ferry Route, 1: Expressway, 2: Urban Expressway, 3: National Highway, 4: Local Road, 5: General Road)",
                          "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5"
                          ],
                          "example": 1
                        },
                        "traffic_color": {
                          "type": "string",
                          "description": "The color code representing the traffic condition of this segment.",
                          "example": "#fb3a76"
                        },
                        "point_type": {
                          "type": "string",
                          "description": "Indicates the type of the point on the route. (S: Start, V: Via, E: End, N: Normal)",
                          "examples": [
                            "S",
                            "V",
                            "E",
                            "N"
                          ]
                        }
                      }
                    }
                  },
                  "spend_time": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total estimated travel time for the entire route in seconds.",
                    "example": 3720
                  },
                  "toll_fee": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total toll fees incurred on the route.",
                    "example": 3400
                  },
                  "isHighWay": {
                    "type": "boolean",
                    "description": "Indicates whether the route includes a highway."
                  }
                }
              }
            }
          },
          "header": {
            "type": "object",
            "description": "Shows the status of the API response result.",
            "properties": {
              "isSuccessful": {
                "type": "boolean",
                "description": "Indicates whether the API request was successful.",
                "example": true
              },
              "resultCode": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                "example": 0
              },
              "resultMessage": {
                "type": "string",
                "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
              }
            }
          }
        }
      },
      "Point": {
        "type": "object",
        "description": "Represents X, Y coordinate values.",
        "properties": {
          "posX": {
            "type": "string",
            "description": "Represents the X coordinate.",
            "example": "126.9071869221794",
            "minLength": 1
          },
          "posY": {
            "type": "string",
            "description": "Represents the Y coordinate.",
            "example": "37.53078938747262",
            "minLength": 1
          }
        },
        "required": [
          "posX",
          "posY"
        ]
      },
      "RouteDistanceMatrixRequest": {
        "type": "object",
        "description": "Route Distance Matrix request body.",
        "properties": {
          "points": {
            "type": "array",
            "description": "Represents a list of coordinates. Can receive a minimum of 3 and a maximum of 200 coordinates.",
            "items": {
              "type": "object",
              "description": "Represents X, Y coordinate values.",
              "properties": {
                "posX": {
                  "type": "string",
                  "description": "Represents the X coordinate.",
                  "example": "126.9071869221794",
                  "minLength": 1
                },
                "posY": {
                  "type": "string",
                  "description": "Represents the Y coordinate.",
                  "example": "37.53078938747262",
                  "minLength": 1
                }
              },
              "required": [
                "posX",
                "posY"
              ]
            },
            "maxItems": 200,
            "minItems": 3
          },
          "traffic": {
            "type": "integer",
            "format": "int32",
            "description": "Represents the type of traffic information. Values from 0 to 3 can be used, with a default of 0. 0 means not used, 1 means real-time, 2 means statistical, and 3 means real-time and statistical combined.",
            "examples": [
              "0",
              "1",
              "2",
              "3"
            ]
          },
          "time": {
            "type": "integer",
            "format": "unix-time",
            "description": "Represents the request time. This is activated when using statistical traffic information. The time format is Unix time in seconds.",
            "example": 1723188000
          }
        },
        "required": [
          "points"
        ]
      },
      "Distance": {
        "type": "object",
        "description": "Represents the distance information from the origin to the destination.",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "description": "Represents the distance in meters.",
            "example": 19971
          },
          "text": {
            "type": "string",
            "description": "Represents the distance in kilometers.",
            "example": "20.0 km"
          }
        }
      },
      "Duration": {
        "type": "object",
        "description": "Represents the duration information from the origin to the destination.",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "description": "Represents the duration in seconds.",
            "example": 1437
          },
          "text": {
            "type": "string",
            "description": "Represents the duration in minutes.",
            "example": "23 mins"
          }
        }
      },
      "RouteDistanceMatrixResponse": {
        "type": "object",
        "description": "The final response object for the Distance Matrix API. It contains distance and time matrix information between multiple origins and destinations.",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Represents the mode of transportation. Currently fixed to 'driving'.",
            "example": "driving"
          },
          "origins": {
            "type": "array",
            "description": "The list of longitude and latitude coordinates used in the request.",
            "example": [
              "127.0955, 37.4170",
              "127.0978, 37.4113",
              "126.8465, 37.5683"
            ],
            "items": {
              "type": "string"
            }
          },
          "rows": {
            "type": "array",
            "description": "Represents the route results (RouteRow) for each origin as an array. One 'RouteRow' is created for each coordinate in 'origins', forming an N x N matrix structure (where N is the number of coordinates).",
            "items": {
              "type": "object",
              "description": "A row object containing route information (RouteElement) from a single origin to all destinations.",
              "properties": {
                "elements": {
                  "type": "array",
                  "description": "Represents the list of route information from a single origin to all destinations (including itself). It is sorted in the same order as the requested destination coordinates. For example, if 3 coordinates are requested, this list will contain 3 RouteElements.",
                  "items": {
                    "type": "object",
                    "description": "An object containing the route search result for a single origin-destination pair (cell).",
                    "properties": {
                      "distance": {
                        "type": "object",
                        "description": "Represents the distance information from the origin to the destination.",
                        "properties": {
                          "value": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Represents the distance in meters.",
                            "example": 19971
                          },
                          "text": {
                            "type": "string",
                            "description": "Represents the distance in kilometers.",
                            "example": "20.0 km"
                          }
                        }
                      },
                      "duration": {
                        "type": "object",
                        "description": "Represents the duration information from the origin to the destination.",
                        "properties": {
                          "value": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Represents the duration in seconds.",
                            "example": 1437
                          },
                          "text": {
                            "type": "string",
                            "description": "Represents the duration in minutes.",
                            "example": "23 mins"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Represents the status of the result. As of version 1.0, only 'OK' is returned. This value may change in future versions.",
                        "example": "OK"
                      }
                    }
                  }
                }
              }
            }
          },
          "header": {
            "type": "object",
            "description": "Shows the status of the API response result.",
            "properties": {
              "isSuccessful": {
                "type": "boolean",
                "description": "Indicates whether the API request was successful.",
                "example": true
              },
              "resultCode": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                "example": 0
              },
              "resultMessage": {
                "type": "string",
                "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
              }
            }
          }
        }
      },
      "RouteElement": {
        "type": "object",
        "description": "An object containing the route search result for a single origin-destination pair (cell).",
        "properties": {
          "distance": {
            "type": "object",
            "description": "Represents the distance information from the origin to the destination.",
            "properties": {
              "value": {
                "type": "integer",
                "format": "int64",
                "description": "Represents the distance in meters.",
                "example": 19971
              },
              "text": {
                "type": "string",
                "description": "Represents the distance in kilometers.",
                "example": "20.0 km"
              }
            }
          },
          "duration": {
            "type": "object",
            "description": "Represents the duration information from the origin to the destination.",
            "properties": {
              "value": {
                "type": "integer",
                "format": "int64",
                "description": "Represents the duration in seconds.",
                "example": 1437
              },
              "text": {
                "type": "string",
                "description": "Represents the duration in minutes.",
                "example": "23 mins"
              }
            }
          },
          "status": {
            "type": "string",
            "description": "Represents the status of the result. As of version 1.0, only 'OK' is returned. This value may change in future versions.",
            "example": "OK"
          }
        }
      },
      "RouteRow": {
        "type": "object",
        "description": "A row object containing route information (RouteElement) from a single origin to all destinations.",
        "properties": {
          "elements": {
            "type": "array",
            "description": "Represents the list of route information from a single origin to all destinations (including itself). It is sorted in the same order as the requested destination coordinates. For example, if 3 coordinates are requested, this list will contain 3 RouteElements.",
            "items": {
              "type": "object",
              "description": "An object containing the route search result for a single origin-destination pair (cell).",
              "properties": {
                "distance": {
                  "type": "object",
                  "description": "Represents the distance information from the origin to the destination.",
                  "properties": {
                    "value": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Represents the distance in meters.",
                      "example": 19971
                    },
                    "text": {
                      "type": "string",
                      "description": "Represents the distance in kilometers.",
                      "example": "20.0 km"
                    }
                  }
                },
                "duration": {
                  "type": "object",
                  "description": "Represents the duration information from the origin to the destination.",
                  "properties": {
                    "value": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Represents the duration in seconds.",
                      "example": 1437
                    },
                    "text": {
                      "type": "string",
                      "description": "Represents the duration in minutes.",
                      "example": "23 mins"
                    }
                  }
                },
                "status": {
                  "type": "string",
                  "description": "Represents the status of the result. As of version 1.0, only 'OK' is returned. This value may change in future versions.",
                  "example": "OK"
                }
              }
            }
          }
        }
      },
      "MultiOptimalSearchRequest": {
        "type": "object",
        "description": "Multi optimal point search request body",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Represents X, Y coordinate values.",
              "properties": {
                "posX": {
                  "type": "string",
                  "description": "Represents the X coordinate.",
                  "example": "126.9071869221794",
                  "minLength": 1
                },
                "posY": {
                  "type": "string",
                  "description": "Represents the Y coordinate.",
                  "example": "37.53078938747262",
                  "minLength": 1
                }
              },
              "required": [
                "posX",
                "posY"
              ]
            },
            "maxItems": 50,
            "minItems": 1
          },
          "option": {
            "type": "object",
            "description": "You can set the optimal point properties and maximum number of results.",
            "properties": {
              "type": {
                "type": "integer",
                "format": "int32",
                "description": "Represents the optimal point property. Values from 0 to 7 can be used as input, with a default value of 0. 0 means all, 1 is vehicle entrance point, 2 is taxi boarding/alighting point (building), 3 is taxi boarding/alighting point (complex), 4 is delivery vehicle drop-off point, 5 is pedestrian entrance point, 6 is delivery drop-off point (vehicle, motorcycle), and 7 is delivery drop-off point (bicycle, walking).",
                "examples": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7"
                ]
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "Represents the maximum number of result lists. The default value is -1, which returns all result counts. If you input an arbitrary positive integer n, it will return a maximum of n lists.",
                "example": -1
              }
            }
          }
        }
      },
      "Option": {
        "type": "object",
        "description": "You can set the optimal point properties and maximum number of results.",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32",
            "description": "Represents the optimal point property. Values from 0 to 7 can be used as input, with a default value of 0. 0 means all, 1 is vehicle entrance point, 2 is taxi boarding/alighting point (building), 3 is taxi boarding/alighting point (complex), 4 is delivery vehicle drop-off point, 5 is pedestrian entrance point, 6 is delivery drop-off point (vehicle, motorcycle), and 7 is delivery drop-off point (bicycle, walking).",
            "examples": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7"
            ]
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Represents the maximum number of result lists. The default value is -1, which returns all result counts. If you input an arbitrary positive integer n, it will return a maximum of n lists.",
            "example": -1
          }
        }
      },
      "EntryPoint": {
        "type": "object",
        "description": "Represents the detailed contents of the optimal point search results.",
        "properties": {
          "x": {
            "type": "number",
            "format": "double",
            "description": "Represents the X coordinate of the optimal point.",
            "example": 126.90718692215697
          },
          "y": {
            "type": "number",
            "format": "double",
            "description": "Represents the Y coordinate of the optimal point.",
            "example": 37.5307893874629
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "description": "Represents the optimal point property. The detailed description is the same as the type field description in the request body.",
            "examples": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7"
            ]
          },
          "angle": {
            "type": "integer",
            "format": "int32",
            "description": "Represents the expected direction angle of a vehicle entering/exiting to the matched road coordinates.",
            "example": 341
          }
        }
      },
      "MultiOptimalSearchResponse": {
        "type": "object",
        "description": "Represents the multi optimal point search result values.",
        "properties": {
          "origins": {
            "type": "array",
            "description": "Represents the list of x, y coordinates sent in the request. It is expressed as a two-dimensional array of double type.",
            "example": [
              [
                126.9071,
                37.5307
              ],
              [
                127.0275,
                37.4979
              ]
            ],
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "datas": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Represents the multi optimal point search result summary information.",
              "properties": {
                "result": {
                  "type": "boolean",
                  "description": "Indicates whether the search result was successful."
                },
                "count": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Indicates the number of search results found.",
                  "example": 10
                },
                "entrypoints": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Represents the detailed contents of the optimal point search results.",
                    "properties": {
                      "x": {
                        "type": "number",
                        "format": "double",
                        "description": "Represents the X coordinate of the optimal point.",
                        "example": 126.90718692215697
                      },
                      "y": {
                        "type": "number",
                        "format": "double",
                        "description": "Represents the Y coordinate of the optimal point.",
                        "example": 37.5307893874629
                      },
                      "type": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Represents the optimal point property. The detailed description is the same as the type field description in the request body.",
                        "examples": [
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7"
                        ]
                      },
                      "angle": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Represents the expected direction angle of a vehicle entering/exiting to the matched road coordinates.",
                        "example": 341
                      }
                    }
                  }
                }
              }
            }
          },
          "header": {
            "type": "object",
            "description": "Shows the status of the API response result.",
            "properties": {
              "isSuccessful": {
                "type": "boolean",
                "description": "Indicates whether the API request was successful.",
                "example": true
              },
              "resultCode": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                "example": 0
              },
              "resultMessage": {
                "type": "string",
                "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
              }
            }
          }
        }
      },
      "MultiOptimalSearchSummary": {
        "type": "object",
        "description": "Represents the multi optimal point search result summary information.",
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Indicates whether the search result was successful."
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the number of search results found.",
            "example": 10
          },
          "entrypoints": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Represents the detailed contents of the optimal point search results.",
              "properties": {
                "x": {
                  "type": "number",
                  "format": "double",
                  "description": "Represents the X coordinate of the optimal point.",
                  "example": 126.90718692215697
                },
                "y": {
                  "type": "number",
                  "format": "double",
                  "description": "Represents the Y coordinate of the optimal point.",
                  "example": 37.5307893874629
                },
                "type": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Represents the optimal point property. The detailed description is the same as the type field description in the request body.",
                  "examples": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                  ]
                },
                "angle": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Represents the expected direction angle of a vehicle entering/exiting to the matched road coordinates.",
                  "example": 341
                }
              }
            }
          }
        }
      },
      "CoordinatesMultiRequest": {
        "type": "object",
        "description": "Multi geocoding request body",
        "properties": {
          "data": {
            "type": "array",
            "description": "The data type of the multi geocoding API request body is in array format and can have a length from 1 to 3000.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The id has a 1:1 relationship with the reqid field in the response body and is a unique id to identify multi geocoding requests. The id can be arbitrarily generated and sent by the client. However, the id can only contain uppercase and lowercase English letters and numbers and is limited to 1-10 characters.",
                  "example": "asdf1234",
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]{1,10}"
                },
                "query": {
                  "type": "string",
                  "description": "Search keyword",
                  "example": "성남시",
                  "minLength": 1
                }
              },
              "required": [
                "id",
                "query"
              ]
            },
            "maxItems": 3000,
            "minItems": 1
          }
        }
      },
      "CoordinatesMultiSearchCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id has a 1:1 relationship with the reqid field in the response body and is a unique id to identify multi geocoding requests. The id can be arbitrarily generated and sent by the client. However, the id can only contain uppercase and lowercase English letters and numbers and is limited to 1-10 characters.",
            "example": "asdf1234",
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]{1,10}"
          },
          "query": {
            "type": "string",
            "description": "Search keyword",
            "example": "성남시",
            "minLength": 1
          }
        },
        "required": [
          "id",
          "query"
        ]
      },
      "Adm": {
        "type": "object",
        "description": "Represents the result of converting an address to coordinate values.",
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
            "examples": [
              "1",
              "2",
              "3"
            ]
          },
          "posx": {
            "type": "string",
            "description": "Indicates the X coordinate.",
            "example": 127.146083
          },
          "posy": {
            "type": "string",
            "description": "Indicates the Y coordinate.",
            "example": 37.450129
          },
          "admcode": {
            "type": "string",
            "description": "Indicates the legal district code.",
            "example": 41131
          },
          "address": {
            "type": "string",
            "description": "Indicates the full address.",
            "example": "경기도 성남시 수정구"
          },
          "address_sido": {
            "type": "string",
            "description": "Indicates the city/province.",
            "example": "경기도"
          },
          "address_gu": {
            "type": "string",
            "description": "Indicates the county/district.",
            "example": "성남시 수정구"
          },
          "address_dong": {
            "type": "string",
            "description": "Indicates the legal dong name.",
            "example": "태평동"
          },
          "address_haeng": {
            "type": "string",
            "description": "Indicates the administrative dong name.",
            "example": "태평1동"
          },
          "legalcode": {
            "type": "string",
            "description": "Indicates the legal dong code.",
            "example": 4113110200
          },
          "haengcode": {
            "type": "string",
            "description": "Indicates the administrative dong code.",
            "example": 4113154000
          },
          "jibun": {
            "type": "string",
            "description": "Indicates the lot number.",
            "example": 6833
          },
          "roadname": {
            "type": "string",
            "description": "Indicates the new address road name.",
            "example": "경기도 성남시 수정구 성남대로"
          },
          "roadjibun": {
            "type": "string",
            "description": "Indicates the road name address lot number.",
            "example": "1241-1"
          },
          "postcode": {
            "type": "string",
            "description": "Indicates the postal code. Appears when searching address and lot number together.",
            "example": 13110
          },
          "buildname": {
            "type": "string",
            "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
            "example": "태평1동"
          },
          "accuracy": {
            "type": "string",
            "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
            "examples": [
              "0",
              "1",
              "2",
              "3"
            ]
          },
          "distance": {
            "type": "string",
            "description": "Indicates the distance.",
            "example": 19109
          }
        }
      },
      "CoordinatesMultiResponse": {
        "type": "object",
        "description": "Shows the multi geocoding API response results.",
        "properties": {
          "address": {
            "type": "object",
            "description": "Summarizes the result of converting an address to coordinates.",
            "properties": {
              "result": {
                "type": "boolean",
                "description": "Indicates whether the search result was successful."
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the total number of search results. For example, if the length of the [id, query] array sent in the request body is 10 but the actual search results are 8, the count value is returned as 8.",
                "example": 10
              },
              "geos": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Indicates the search results corresponding to the request id.",
                  "properties": {
                    "found": {
                      "type": "boolean",
                      "description": "Indicates whether results exist.",
                      "examples": [
                        "true",
                        "false"
                      ]
                    },
                    "reqid": {
                      "type": "string",
                      "description": "Has a 1:1 relationship with the id included in the request body and is a unique id to identify multi geocoding results.",
                      "example": 1
                    },
                    "query": {
                      "type": "string",
                      "description": "Search keyword",
                      "example": "성남시"
                    },
                    "admcount": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Indicates the number of search results found.",
                      "example": 1
                    },
                    "adm": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Represents the result of converting an address to coordinate values.",
                        "properties": {
                          "type": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                            "examples": [
                              "1",
                              "2",
                              "3"
                            ]
                          },
                          "posx": {
                            "type": "string",
                            "description": "Indicates the X coordinate.",
                            "example": 127.146083
                          },
                          "posy": {
                            "type": "string",
                            "description": "Indicates the Y coordinate.",
                            "example": 37.450129
                          },
                          "admcode": {
                            "type": "string",
                            "description": "Indicates the legal district code.",
                            "example": 41131
                          },
                          "address": {
                            "type": "string",
                            "description": "Indicates the full address.",
                            "example": "경기도 성남시 수정구"
                          },
                          "address_sido": {
                            "type": "string",
                            "description": "Indicates the city/province.",
                            "example": "경기도"
                          },
                          "address_gu": {
                            "type": "string",
                            "description": "Indicates the county/district.",
                            "example": "성남시 수정구"
                          },
                          "address_dong": {
                            "type": "string",
                            "description": "Indicates the legal dong name.",
                            "example": "태평동"
                          },
                          "address_haeng": {
                            "type": "string",
                            "description": "Indicates the administrative dong name.",
                            "example": "태평1동"
                          },
                          "legalcode": {
                            "type": "string",
                            "description": "Indicates the legal dong code.",
                            "example": 4113110200
                          },
                          "haengcode": {
                            "type": "string",
                            "description": "Indicates the administrative dong code.",
                            "example": 4113154000
                          },
                          "jibun": {
                            "type": "string",
                            "description": "Indicates the lot number.",
                            "example": 6833
                          },
                          "roadname": {
                            "type": "string",
                            "description": "Indicates the new address road name.",
                            "example": "경기도 성남시 수정구 성남대로"
                          },
                          "roadjibun": {
                            "type": "string",
                            "description": "Indicates the road name address lot number.",
                            "example": "1241-1"
                          },
                          "postcode": {
                            "type": "string",
                            "description": "Indicates the postal code. Appears when searching address and lot number together.",
                            "example": 13110
                          },
                          "buildname": {
                            "type": "string",
                            "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                            "example": "태평1동"
                          },
                          "accuracy": {
                            "type": "string",
                            "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                            "examples": [
                              "0",
                              "1",
                              "2",
                              "3"
                            ]
                          },
                          "distance": {
                            "type": "string",
                            "description": "Indicates the distance.",
                            "example": 19109
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "header": {
            "type": "object",
            "description": "Shows the status of the API response result.",
            "properties": {
              "isSuccessful": {
                "type": "boolean",
                "description": "Indicates whether the API request was successful.",
                "example": true
              },
              "resultCode": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                "example": 0
              },
              "resultMessage": {
                "type": "string",
                "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
              }
            }
          }
        }
      },
      "Geos": {
        "type": "object",
        "description": "Indicates the search results corresponding to the request id.",
        "properties": {
          "found": {
            "type": "boolean",
            "description": "Indicates whether results exist.",
            "examples": [
              "true",
              "false"
            ]
          },
          "reqid": {
            "type": "string",
            "description": "Has a 1:1 relationship with the id included in the request body and is a unique id to identify multi geocoding results.",
            "example": 1
          },
          "query": {
            "type": "string",
            "description": "Search keyword",
            "example": "성남시"
          },
          "admcount": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the number of search results found.",
            "example": 1
          },
          "adm": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Represents the result of converting an address to coordinate values.",
              "properties": {
                "type": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                  "examples": [
                    "1",
                    "2",
                    "3"
                  ]
                },
                "posx": {
                  "type": "string",
                  "description": "Indicates the X coordinate.",
                  "example": 127.146083
                },
                "posy": {
                  "type": "string",
                  "description": "Indicates the Y coordinate.",
                  "example": 37.450129
                },
                "admcode": {
                  "type": "string",
                  "description": "Indicates the legal district code.",
                  "example": 41131
                },
                "address": {
                  "type": "string",
                  "description": "Indicates the full address.",
                  "example": "경기도 성남시 수정구"
                },
                "address_sido": {
                  "type": "string",
                  "description": "Indicates the city/province.",
                  "example": "경기도"
                },
                "address_gu": {
                  "type": "string",
                  "description": "Indicates the county/district.",
                  "example": "성남시 수정구"
                },
                "address_dong": {
                  "type": "string",
                  "description": "Indicates the legal dong name.",
                  "example": "태평동"
                },
                "address_haeng": {
                  "type": "string",
                  "description": "Indicates the administrative dong name.",
                  "example": "태평1동"
                },
                "legalcode": {
                  "type": "string",
                  "description": "Indicates the legal dong code.",
                  "example": 4113110200
                },
                "haengcode": {
                  "type": "string",
                  "description": "Indicates the administrative dong code.",
                  "example": 4113154000
                },
                "jibun": {
                  "type": "string",
                  "description": "Indicates the lot number.",
                  "example": 6833
                },
                "roadname": {
                  "type": "string",
                  "description": "Indicates the new address road name.",
                  "example": "경기도 성남시 수정구 성남대로"
                },
                "roadjibun": {
                  "type": "string",
                  "description": "Indicates the road name address lot number.",
                  "example": "1241-1"
                },
                "postcode": {
                  "type": "string",
                  "description": "Indicates the postal code. Appears when searching address and lot number together.",
                  "example": 13110
                },
                "buildname": {
                  "type": "string",
                  "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                  "example": "태평1동"
                },
                "accuracy": {
                  "type": "string",
                  "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                  "examples": [
                    "0",
                    "1",
                    "2",
                    "3"
                  ]
                },
                "distance": {
                  "type": "string",
                  "description": "Indicates the distance.",
                  "example": 19109
                }
              }
            }
          }
        }
      },
      "MultiAddress": {
        "type": "object",
        "description": "Summarizes the result of converting an address to coordinates.",
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Indicates whether the search result was successful."
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the total number of search results. For example, if the length of the [id, query] array sent in the request body is 10 but the actual search results are 8, the count value is returned as 8.",
            "example": 10
          },
          "geos": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Indicates the search results corresponding to the request id.",
              "properties": {
                "found": {
                  "type": "boolean",
                  "description": "Indicates whether results exist.",
                  "examples": [
                    "true",
                    "false"
                  ]
                },
                "reqid": {
                  "type": "string",
                  "description": "Has a 1:1 relationship with the id included in the request body and is a unique id to identify multi geocoding results.",
                  "example": 1
                },
                "query": {
                  "type": "string",
                  "description": "Search keyword",
                  "example": "성남시"
                },
                "admcount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Indicates the number of search results found.",
                  "example": 1
                },
                "adm": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Represents the result of converting an address to coordinate values.",
                    "properties": {
                      "type": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                        "examples": [
                          "1",
                          "2",
                          "3"
                        ]
                      },
                      "posx": {
                        "type": "string",
                        "description": "Indicates the X coordinate.",
                        "example": 127.146083
                      },
                      "posy": {
                        "type": "string",
                        "description": "Indicates the Y coordinate.",
                        "example": 37.450129
                      },
                      "admcode": {
                        "type": "string",
                        "description": "Indicates the legal district code.",
                        "example": 41131
                      },
                      "address": {
                        "type": "string",
                        "description": "Indicates the full address.",
                        "example": "경기도 성남시 수정구"
                      },
                      "address_sido": {
                        "type": "string",
                        "description": "Indicates the city/province.",
                        "example": "경기도"
                      },
                      "address_gu": {
                        "type": "string",
                        "description": "Indicates the county/district.",
                        "example": "성남시 수정구"
                      },
                      "address_dong": {
                        "type": "string",
                        "description": "Indicates the legal dong name.",
                        "example": "태평동"
                      },
                      "address_haeng": {
                        "type": "string",
                        "description": "Indicates the administrative dong name.",
                        "example": "태평1동"
                      },
                      "legalcode": {
                        "type": "string",
                        "description": "Indicates the legal dong code.",
                        "example": 4113110200
                      },
                      "haengcode": {
                        "type": "string",
                        "description": "Indicates the administrative dong code.",
                        "example": 4113154000
                      },
                      "jibun": {
                        "type": "string",
                        "description": "Indicates the lot number.",
                        "example": 6833
                      },
                      "roadname": {
                        "type": "string",
                        "description": "Indicates the new address road name.",
                        "example": "경기도 성남시 수정구 성남대로"
                      },
                      "roadjibun": {
                        "type": "string",
                        "description": "Indicates the road name address lot number.",
                        "example": "1241-1"
                      },
                      "postcode": {
                        "type": "string",
                        "description": "Indicates the postal code. Appears when searching address and lot number together.",
                        "example": 13110
                      },
                      "buildname": {
                        "type": "string",
                        "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                        "example": "태평1동"
                      },
                      "accuracy": {
                        "type": "string",
                        "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                        "examples": [
                          "0",
                          "1",
                          "2",
                          "3"
                        ]
                      },
                      "distance": {
                        "type": "string",
                        "description": "Indicates the distance.",
                        "example": 19109
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "Summarizes the result of converting an address to coordinates.",
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Indicates whether the search result was successful.",
            "examples": [
              "true",
              "false"
            ]
          },
          "totalcount": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the total number of search results.",
            "example": 10
          },
          "admtotalcount": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the total count of legal/administrative district codes in search results.",
            "example": 10
          },
          "admcount": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the search count corresponding to the reqcount parameter value in Geocoding search conditions.",
            "example": 10
          },
          "res_type": {
            "type": "string",
            "description": "Indicates the search result type. Written in the order of POI, CATEGORY, ADM, TEL_POI, with each value represented as Y or N.",
            "example": "NNYN"
          },
          "adm": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Represents the result of converting an address to coordinate values.",
              "properties": {
                "type": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                  "examples": [
                    "1",
                    "2",
                    "3"
                  ]
                },
                "posx": {
                  "type": "string",
                  "description": "Indicates the X coordinate.",
                  "example": 127.146083
                },
                "posy": {
                  "type": "string",
                  "description": "Indicates the Y coordinate.",
                  "example": 37.450129
                },
                "admcode": {
                  "type": "string",
                  "description": "Indicates the legal district code.",
                  "example": 41131
                },
                "address": {
                  "type": "string",
                  "description": "Indicates the full address.",
                  "example": "경기도 성남시 수정구"
                },
                "address_sido": {
                  "type": "string",
                  "description": "Indicates the city/province.",
                  "example": "경기도"
                },
                "address_gu": {
                  "type": "string",
                  "description": "Indicates the county/district.",
                  "example": "성남시 수정구"
                },
                "address_dong": {
                  "type": "string",
                  "description": "Indicates the legal dong name.",
                  "example": "태평동"
                },
                "address_haeng": {
                  "type": "string",
                  "description": "Indicates the administrative dong name.",
                  "example": "태평1동"
                },
                "legalcode": {
                  "type": "string",
                  "description": "Indicates the legal dong code.",
                  "example": 4113110200
                },
                "haengcode": {
                  "type": "string",
                  "description": "Indicates the administrative dong code.",
                  "example": 4113154000
                },
                "jibun": {
                  "type": "string",
                  "description": "Indicates the lot number.",
                  "example": 6833
                },
                "roadname": {
                  "type": "string",
                  "description": "Indicates the new address road name.",
                  "example": "경기도 성남시 수정구 성남대로"
                },
                "roadjibun": {
                  "type": "string",
                  "description": "Indicates the road name address lot number.",
                  "example": "1241-1"
                },
                "postcode": {
                  "type": "string",
                  "description": "Indicates the postal code. Appears when searching address and lot number together.",
                  "example": 13110
                },
                "buildname": {
                  "type": "string",
                  "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                  "example": "태평1동"
                },
                "accuracy": {
                  "type": "string",
                  "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                  "examples": [
                    "0",
                    "1",
                    "2",
                    "3"
                  ]
                },
                "distance": {
                  "type": "string",
                  "description": "Indicates the distance.",
                  "example": 19109
                }
              }
            }
          }
        }
      },
      "CoordinatesResponse": {
        "type": "object",
        "description": "Shows the result of the Geocoding API response.",
        "properties": {
          "address": {
            "type": "object",
            "description": "Summarizes the result of converting an address to coordinates.",
            "properties": {
              "result": {
                "type": "boolean",
                "description": "Indicates whether the search result was successful.",
                "examples": [
                  "true",
                  "false"
                ]
              },
              "totalcount": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the total number of search results.",
                "example": 10
              },
              "admtotalcount": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the total count of legal/administrative district codes in search results.",
                "example": 10
              },
              "admcount": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the search count corresponding to the reqcount parameter value in Geocoding search conditions.",
                "example": 10
              },
              "res_type": {
                "type": "string",
                "description": "Indicates the search result type. Written in the order of POI, CATEGORY, ADM, TEL_POI, with each value represented as Y or N.",
                "example": "NNYN"
              },
              "adm": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Represents the result of converting an address to coordinate values.",
                  "properties": {
                    "type": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Indicates the search type. 1 means administrative district search, 2 means lot number search, 3 means new address search.",
                      "examples": [
                        "1",
                        "2",
                        "3"
                      ]
                    },
                    "posx": {
                      "type": "string",
                      "description": "Indicates the X coordinate.",
                      "example": 127.146083
                    },
                    "posy": {
                      "type": "string",
                      "description": "Indicates the Y coordinate.",
                      "example": 37.450129
                    },
                    "admcode": {
                      "type": "string",
                      "description": "Indicates the legal district code.",
                      "example": 41131
                    },
                    "address": {
                      "type": "string",
                      "description": "Indicates the full address.",
                      "example": "경기도 성남시 수정구"
                    },
                    "address_sido": {
                      "type": "string",
                      "description": "Indicates the city/province.",
                      "example": "경기도"
                    },
                    "address_gu": {
                      "type": "string",
                      "description": "Indicates the county/district.",
                      "example": "성남시 수정구"
                    },
                    "address_dong": {
                      "type": "string",
                      "description": "Indicates the legal dong name.",
                      "example": "태평동"
                    },
                    "address_haeng": {
                      "type": "string",
                      "description": "Indicates the administrative dong name.",
                      "example": "태평1동"
                    },
                    "legalcode": {
                      "type": "string",
                      "description": "Indicates the legal dong code.",
                      "example": 4113110200
                    },
                    "haengcode": {
                      "type": "string",
                      "description": "Indicates the administrative dong code.",
                      "example": 4113154000
                    },
                    "jibun": {
                      "type": "string",
                      "description": "Indicates the lot number.",
                      "example": 6833
                    },
                    "roadname": {
                      "type": "string",
                      "description": "Indicates the new address road name.",
                      "example": "경기도 성남시 수정구 성남대로"
                    },
                    "roadjibun": {
                      "type": "string",
                      "description": "Indicates the road name address lot number.",
                      "example": "1241-1"
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Indicates the postal code. Appears when searching address and lot number together.",
                      "example": 13110
                    },
                    "buildname": {
                      "type": "string",
                      "description": "Indicates the building number. Appears when searching address and lot number together with road name address.",
                      "example": "태평1동"
                    },
                    "accuracy": {
                      "type": "string",
                      "description": "Indicates the accuracy of the lot number. 0 means exact search, 1 means sub-lot extension, 2 means main lot extension, 3 means administrative district search.",
                      "examples": [
                        "0",
                        "1",
                        "2",
                        "3"
                      ]
                    },
                    "distance": {
                      "type": "string",
                      "description": "Indicates the distance.",
                      "example": 19109
                    }
                  }
                }
              }
            }
          },
          "header": {
            "type": "object",
            "description": "Shows the status of the API response result.",
            "properties": {
              "isSuccessful": {
                "type": "boolean",
                "description": "Indicates whether the API request was successful.",
                "example": true
              },
              "resultCode": {
                "type": "integer",
                "format": "int32",
                "description": "Indicates the API response result code. Returns 0 on success, otherwise indicates failure. Major result codes: 0(success), 100(Result Not Found), 101(Argument Error), 102(Internal Server Error), 103(Different Map Version), 201(Searching for Security), 202(Longitude/Latitude), 203(Mobile Phone Number), 300(AppKey Error), 400(Taxi Fare Info not Found), 501(Unknown Fail), 517(Memory allocation failure), 532(Request parameter is invalid), 533(Starting point not selected), 534(Destination not selected), 537(Exceeding navigational distance), 540(Expansion failure due to traffic control), etc.",
                "example": 0
              },
              "resultMessage": {
                "type": "string",
                "description": "Indicates the reason for response failure when the API response fails. Major result messages include: \"Result Not Found\", \"Argument Error\", \"Internal Server Error\", \"Different Map Version\", \"AppKey Error\", \"Searching for Security\", \"Longitude/Latitude\", \"Mobile Phone Number\", \"Unknown Fail\", \"Memory allocation failure\", \"Request parameter is invalid\", \"The starting point is not selected\", \"Destination is not selected\", \"Exceeding the navigational distance\", \"Expansion failure due to inactivity or traffic control\", etc., providing specific error causes for proper exception handling."
              }
            }
          }
        }
      }
    }
  }
}
